"use strict";
// Seeder pour la base de donn√©es FotoLouJay
// G√©n√®re des utilisateurs et produits de test avec des noms s√©n√©galais
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const prisma = new client_1.PrismaClient();
// Noms s√©n√©galais authentiques
const nomsSenegalais = [
    { nom: 'Diop', prenom: 'Amadou' },
    { nom: 'Fall', prenom: 'Fatou' },
    { nom: 'Ndiaye', prenom: 'Moussa' },
    { nom: 'Sow', prenom: 'A√Øssatou' },
    { nom: 'Sy', prenom: 'Ousmane' },
    { nom: 'Ba', prenom: 'Mariama' },
    { nom: 'Sarr', prenom: 'Ibrahima' },
    { nom: 'Kane', prenom: 'Khady' },
    { nom: 'Gueye', prenom: 'Mamadou' },
    { nom: 'Diallo', prenom: 'Bineta' },
    { nom: 'Mbaye', prenom: 'Cheikh' },
    { nom: 'Thiam', prenom: 'Awa' },
    { nom: 'Diouf', prenom: 'Babacar' },
    { nom: 'Ndour', prenom: 'Coumba' },
    { nom: 'Seck', prenom: 'Alioune' },
    { nom: 'Faye', prenom: 'Nd√®ye' },
    { nom: 'Ciss√©', prenom: 'Modou' },
    { nom: 'Dieng', prenom: 'Rama' },
    { nom: 'Tall', prenom: 'Abdou' },
    { nom: 'Niang', prenom: 'Mame' }
];
// Quartiers de Dakar et autres villes du S√©n√©gal
const localisations = [
    'Dakar Plateau',
    'M√©dina, Dakar',
    'Grand Yoff',
    'Parcelles Assainies',
    'Gu√©diawaye',
    'Pikine',
    'Rufisque',
    'Thi√®s',
    'Saint-Louis',
    'Kaolack',
    'Ziguinchor',
    'Tambacounda',
    'Diourbel',
    'Louga',
    'Fatick',
    'Kolda',
    'Matam',
    'Kaffrine',
    'K√©dougou',
    'S√©dhiou'
];
// Produits typiques du S√©n√©gal
const produitsTypiques = [
    {
        nom: 'iPhone 15 Pro Max',
        description: 'T√©l√©phone neuf, encore sous garantie. Couleur bleu titane, 256GB.',
        prix: 850000,
        categorie: 'T√©l√©phone'
    },
    {
        nom: 'Samsung Galaxy S24 Ultra',
        description: 'Smartphone Samsung en excellent √©tat, utilis√© 3 mois seulement.',
        prix: 750000,
        categorie: 'T√©l√©phone'
    },
    {
        nom: 'MacBook Pro M3',
        description: 'Ordinateur portable Apple, 14 pouces, 16GB RAM, 512GB SSD.',
        prix: 1200000,
        categorie: 'Ordinateurs'
    },
    {
        nom: 'Nike Air Max 270',
        description: 'Baskets Nike neuves, taille 42. Couleur noir et blanc.',
        prix: 85000,
        categorie: 'Chaussures'
    },
    {
        nom: 'Rolex Submariner',
        description: 'Montre de luxe authentique, avec certificat d\'authenticit√©.',
        prix: 4500000,
        categorie: 'Montres'
    },
    {
        nom: 'Collier en or 18k',
        description: 'Bijou en or v√©ritable, cha√Æne de 50cm avec pendentif.',
        prix: 150000,
        categorie: 'Bijoux'
    },
    {
        nom: 'Audi A7 2020',
        description: 'Berline allemande, essence, V6 biturbo, 55000km au compteur.',
        prix: 15000000,
        categorie: 'Automobile'
    },
    {
        nom: 'BMW X5 2019',
        description: 'SUV premium, diesel, 7 places, toutes options.',
        prix: 18000000,
        categorie: 'Automobile'
    },
    {
        nom: 'PlayStation 5',
        description: 'Console de jeu Sony PS5, avec 2 manettes et 3 jeux inclus.',
        prix: 450000,
        categorie: '√âlectronique'
    },
    {
        nom: 'R√©frig√©rateur Samsung',
        description: 'Frigo am√©ricain 500L, avec distributeur d\'eau et gla√ßons.',
        prix: 350000,
        categorie: '√âlectrom√©nager'
    }
];
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        console.log('üå± D√©but du seeding de la base de donn√©es FotoLouJay...');
        try {
            // Nettoyer la base de donn√©es
            console.log('üßπ Nettoyage de la base de donn√©es...');
            yield prisma.vueProduit.deleteMany();
            yield prisma.notification.deleteMany();
            yield prisma.produit.deleteMany();
            yield prisma.utilisateur.deleteMany();
            // Cr√©er l'utilisateur sp√©cial
            console.log('üë§ Cr√©ation de l\'utilisateur sp√©cial...');
            const motDePasseHash = yield bcryptjs_1.default.hash('marakhib', 12);
            const utilisateurSpecial = yield prisma.utilisateur.create({
                data: {
                    nom: 'Ngom',
                    prenom: 'Khouss',
                    email: 'khoussn@gmail.com',
                    telephone: '+221 77 123 45 67',
                    motDePasse: motDePasseHash,
                    role: 'ADMINISTRATEUR',
                    estActif: true,
                    dateCreation: new Date(),
                    dateModification: new Date()
                }
            });
            console.log('‚úÖ Utilisateur sp√©cial cr√©√©:', utilisateurSpecial.email);
            // Cr√©er des utilisateurs s√©n√©galais
            console.log('üë• Cr√©ation des utilisateurs s√©n√©galais...');
            const utilisateursCre√©s = [];
            for (let i = 0; i < 15; i++) {
                const nom = nomsSenegalais[i];
                const motDePasseUser = yield bcryptjs_1.default.hash('password123', 12);
                // G√©n√©rer un email bas√© sur le nom
                const email = `${nom.prenom.toLowerCase()}.${nom.nom.toLowerCase()}@fotoljay.sn`;
                // G√©n√©rer un num√©ro de t√©l√©phone s√©n√©galais
                const telephone = `+221 ${77 + Math.floor(Math.random() * 7)} ${Math.floor(Math.random() * 900) + 100} ${Math.floor(Math.random() * 90) + 10} ${Math.floor(Math.random() * 90) + 10}`;
                const utilisateur = yield prisma.utilisateur.create({
                    data: {
                        nom: nom.nom,
                        prenom: nom.prenom,
                        email: email,
                        telephone: telephone,
                        motDePasse: motDePasseUser,
                        role: i < 2 ? 'MODERATEUR' : 'UTILISATEUR', // 2 mod√©rateurs
                        estActif: true,
                        dateCreation: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Dates al√©atoires sur 30 jours
                        dateModification: new Date()
                    }
                });
                utilisateursCre√©s.push(utilisateur);
            }
            console.log(`‚úÖ ${utilisateursCre√©s.length} utilisateurs s√©n√©galais cr√©√©s`);
            // Cr√©er des produits
            console.log('üõçÔ∏è Cr√©ation des produits...');
            const toutsLesUtilisateurs = [utilisateurSpecial, ...utilisateursCre√©s];
            for (let i = 0; i < 25; i++) {
                const produitTemplate = produitsTypiques[i % produitsTypiques.length];
                const utilisateurAleatoire = toutsLesUtilisateurs[Math.floor(Math.random() * toutsLesUtilisateurs.length)];
                const localisationAleatoire = localisations[Math.floor(Math.random() * localisations.length)];
                // Varier les prix
                const variationPrix = 0.8 + Math.random() * 0.4; // Entre 80% et 120% du prix de base
                const prixFinal = Math.floor(produitTemplate.prix * variationPrix);
                // Date de cr√©ation al√©atoire (derniers 15 jours)
                const dateCreation = new Date(Date.now() - Math.random() * 15 * 24 * 60 * 60 * 1000);
                // Date d'expiration (7 jours apr√®s cr√©ation)
                const dateExpiration = new Date(dateCreation.getTime() + 7 * 24 * 60 * 60 * 1000);
                const statutsDisponibles = ['VALIDE', 'EN_ATTENTE', 'VALIDE', 'VALIDE'];
                const statutChoisi = statutsDisponibles[Math.floor(Math.random() * statutsDisponibles.length)];
                const produit = yield prisma.produit.create({
                    data: {
                        titre: produitTemplate.nom + (i > 9 ? ` (${i + 1})` : ''),
                        description: produitTemplate.description,
                        prix: prixFinal,
                        localisation: localisationAleatoire,
                        imageUrl: `https://picsum.photos/400/300?random=${i + 1}`, // Images al√©atoires
                        estVip: Math.random() < 0.3, // 30% de chance d'√™tre VIP
                        statut: statutChoisi, // 75% valid√©s
                        vues: Math.floor(Math.random() * 100),
                        utilisateurId: utilisateurAleatoire.id,
                        dateCreation: dateCreation,
                        dateExpiration: dateExpiration,
                        dateModification: new Date()
                    }
                });
                // Cr√©er quelques notifications pour les utilisateurs
                if (Math.random() < 0.4) { // 40% de chance
                    yield prisma.notification.create({
                        data: {
                            titre: 'Produit valid√© !',
                            message: `Votre produit "${produit.titre}" a √©t√© approuv√© et est maintenant visible.`,
                            type: 'PRODUIT_VALIDE',
                            utilisateurId: utilisateurAleatoire.id,
                            estLue: Math.random() < 0.6, // 60% lues
                            dateCreation: new Date(produit.dateCreation.getTime() + 60 * 60 * 1000) // 1h apr√®s cr√©ation produit
                        }
                    });
                }
            }
            console.log('‚úÖ 25 produits cr√©√©s avec succ√®s');
            // Cr√©er des notifications g√©n√©rales
            console.log('üîî Cr√©ation des notifications...');
            for (const utilisateur of toutsLesUtilisateurs.slice(0, 10)) {
                // Notification d'expiration
                yield prisma.notification.create({
                    data: {
                        titre: 'Produit bient√¥t expir√©',
                        message: 'Un de vos produits expire dans 2 jours. Pensez √† le republier !',
                        type: 'PRODUIT_EXPIRE',
                        utilisateurId: utilisateur.id,
                        estLue: false,
                        dateCreation: new Date(Date.now() - Math.random() * 2 * 24 * 60 * 60 * 1000)
                    }
                });
            }
            // Statistiques finales
            const statsUtilisateurs = yield prisma.utilisateur.count();
            const statsProduits = yield prisma.produit.count();
            const statsNotifications = yield prisma.notification.count();
            console.log('\nüéâ Seeding termin√© avec succ√®s !');
            console.log('üìä Statistiques:');
            console.log(`   üë• Utilisateurs: ${statsUtilisateurs}`);
            console.log(`   üõçÔ∏è  Produits: ${statsProduits}`);
            console.log(`   üîî Notifications: ${statsNotifications}`);
            console.log('\nüîê Compte administrateur:');
            console.log(`   üìß Email: khoussn@gmail.com`);
            console.log(`   üîë Mot de passe: marakhib`);
            console.log('\nüë§ Comptes utilisateurs:');
            console.log(`   üîë Mot de passe pour tous: password123`);
            console.log(`   üìß Emails: [prenom].[nom]@fotoljay.sn`);
            console.log(`   üì± T√©l√©phones: Num√©ros s√©n√©galais (+221)`);
        }
        catch (error) {
            console.error('‚ùå Erreur lors du seeding:', error);
            throw error;
        }
        finally {
            yield prisma.$disconnect();
        }
    });
}
// Fonction utilitaire pour g√©n√©rer des donn√©es al√©atoires
function genererTelephoneSenegalais() {
    const operateurs = ['77', '78', '70', '76', '75']; // Principaux op√©rateurs s√©n√©galais
    const operateur = operateurs[Math.floor(Math.random() * operateurs.length)];
    const numero = Math.floor(Math.random() * 9000000) + 1000000; // 7 chiffres
    return `+221 ${operateur} ${numero.toString().substring(0, 3)} ${numero.toString().substring(3, 5)} ${numero.toString().substring(5, 7)}`;
}
// Ex√©cuter le seeder
main()
    .catch((e) => {
    console.error('üí• Erreur fatale:', e);
    process.exit(1);
});
exports.default = main;
