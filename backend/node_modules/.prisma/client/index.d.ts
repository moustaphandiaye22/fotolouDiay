
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Utilisateur
 * 
 */
export type Utilisateur = $Result.DefaultSelection<Prisma.$UtilisateurPayload>
/**
 * Model Produit
 * 
 */
export type Produit = $Result.DefaultSelection<Prisma.$ProduitPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model VueProduit
 * 
 */
export type VueProduit = $Result.DefaultSelection<Prisma.$VueProduitPayload>
/**
 * Model Paiement
 * 
 */
export type Paiement = $Result.DefaultSelection<Prisma.$PaiementPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const RoleUtilisateur: {
  UTILISATEUR: 'UTILISATEUR',
  MODERATEUR: 'MODERATEUR',
  ADMINISTRATEUR: 'ADMINISTRATEUR'
};

export type RoleUtilisateur = (typeof RoleUtilisateur)[keyof typeof RoleUtilisateur]


export const StatutProduit: {
  EN_ATTENTE: 'EN_ATTENTE',
  VALIDE: 'VALIDE',
  REJETE: 'REJETE',
  EXPIRE: 'EXPIRE'
};

export type StatutProduit = (typeof StatutProduit)[keyof typeof StatutProduit]


export const TypeNotification: {
  GENERALE: 'GENERALE',
  PRODUIT_EXPIRE: 'PRODUIT_EXPIRE',
  PRODUIT_VALIDE: 'PRODUIT_VALIDE',
  PRODUIT_REJETE: 'PRODUIT_REJETE',
  RAPPEL: 'RAPPEL'
};

export type TypeNotification = (typeof TypeNotification)[keyof typeof TypeNotification]


export const PrestatairePaiement: {
  WAVE: 'WAVE',
  ORANGE_MONEY: 'ORANGE_MONEY',
  PAYTECH: 'PAYTECH',
  CARTE: 'CARTE'
};

export type PrestatairePaiement = (typeof PrestatairePaiement)[keyof typeof PrestatairePaiement]


export const StatutPaiement: {
  EN_ATTENTE: 'EN_ATTENTE',
  CONFIRME: 'CONFIRME',
  ANNULE: 'ANNULE',
  ECHEC: 'ECHEC',
  EXPIRE: 'EXPIRE'
};

export type StatutPaiement = (typeof StatutPaiement)[keyof typeof StatutPaiement]


export const TypeTransaction: {
  DEBIT: 'DEBIT',
  CREDIT: 'CREDIT',
  REMBOURSEMENT: 'REMBOURSEMENT'
};

export type TypeTransaction = (typeof TypeTransaction)[keyof typeof TypeTransaction]


export const StatutTransaction: {
  EN_ATTENTE: 'EN_ATTENTE',
  SUCCES: 'SUCCES',
  ECHEC: 'ECHEC',
  ANNULE: 'ANNULE'
};

export type StatutTransaction = (typeof StatutTransaction)[keyof typeof StatutTransaction]

}

export type RoleUtilisateur = $Enums.RoleUtilisateur

export const RoleUtilisateur: typeof $Enums.RoleUtilisateur

export type StatutProduit = $Enums.StatutProduit

export const StatutProduit: typeof $Enums.StatutProduit

export type TypeNotification = $Enums.TypeNotification

export const TypeNotification: typeof $Enums.TypeNotification

export type PrestatairePaiement = $Enums.PrestatairePaiement

export const PrestatairePaiement: typeof $Enums.PrestatairePaiement

export type StatutPaiement = $Enums.StatutPaiement

export const StatutPaiement: typeof $Enums.StatutPaiement

export type TypeTransaction = $Enums.TypeTransaction

export const TypeTransaction: typeof $Enums.TypeTransaction

export type StatutTransaction = $Enums.StatutTransaction

export const StatutTransaction: typeof $Enums.StatutTransaction

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Utilisateurs
 * const utilisateurs = await prisma.utilisateur.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Utilisateurs
   * const utilisateurs = await prisma.utilisateur.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.utilisateur`: Exposes CRUD operations for the **Utilisateur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Utilisateurs
    * const utilisateurs = await prisma.utilisateur.findMany()
    * ```
    */
  get utilisateur(): Prisma.UtilisateurDelegate<ExtArgs>;

  /**
   * `prisma.produit`: Exposes CRUD operations for the **Produit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produits
    * const produits = await prisma.produit.findMany()
    * ```
    */
  get produit(): Prisma.ProduitDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.vueProduit`: Exposes CRUD operations for the **VueProduit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VueProduits
    * const vueProduits = await prisma.vueProduit.findMany()
    * ```
    */
  get vueProduit(): Prisma.VueProduitDelegate<ExtArgs>;

  /**
   * `prisma.paiement`: Exposes CRUD operations for the **Paiement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Paiements
    * const paiements = await prisma.paiement.findMany()
    * ```
    */
  get paiement(): Prisma.PaiementDelegate<ExtArgs>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Utilisateur: 'Utilisateur',
    Produit: 'Produit',
    Notification: 'Notification',
    VueProduit: 'VueProduit',
    Paiement: 'Paiement',
    Transaction: 'Transaction'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "utilisateur" | "produit" | "notification" | "vueProduit" | "paiement" | "transaction"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Utilisateur: {
        payload: Prisma.$UtilisateurPayload<ExtArgs>
        fields: Prisma.UtilisateurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UtilisateurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UtilisateurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          findFirst: {
            args: Prisma.UtilisateurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UtilisateurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          findMany: {
            args: Prisma.UtilisateurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>[]
          }
          create: {
            args: Prisma.UtilisateurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          createMany: {
            args: Prisma.UtilisateurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UtilisateurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          update: {
            args: Prisma.UtilisateurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          deleteMany: {
            args: Prisma.UtilisateurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UtilisateurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UtilisateurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          aggregate: {
            args: Prisma.UtilisateurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUtilisateur>
          }
          groupBy: {
            args: Prisma.UtilisateurGroupByArgs<ExtArgs>
            result: $Utils.Optional<UtilisateurGroupByOutputType>[]
          }
          count: {
            args: Prisma.UtilisateurCountArgs<ExtArgs>
            result: $Utils.Optional<UtilisateurCountAggregateOutputType> | number
          }
        }
      }
      Produit: {
        payload: Prisma.$ProduitPayload<ExtArgs>
        fields: Prisma.ProduitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProduitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProduitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          findFirst: {
            args: Prisma.ProduitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProduitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          findMany: {
            args: Prisma.ProduitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>[]
          }
          create: {
            args: Prisma.ProduitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          createMany: {
            args: Prisma.ProduitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProduitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          update: {
            args: Prisma.ProduitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          deleteMany: {
            args: Prisma.ProduitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProduitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProduitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          aggregate: {
            args: Prisma.ProduitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduit>
          }
          groupBy: {
            args: Prisma.ProduitGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProduitGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProduitCountArgs<ExtArgs>
            result: $Utils.Optional<ProduitCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      VueProduit: {
        payload: Prisma.$VueProduitPayload<ExtArgs>
        fields: Prisma.VueProduitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VueProduitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VueProduitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VueProduitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VueProduitPayload>
          }
          findFirst: {
            args: Prisma.VueProduitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VueProduitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VueProduitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VueProduitPayload>
          }
          findMany: {
            args: Prisma.VueProduitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VueProduitPayload>[]
          }
          create: {
            args: Prisma.VueProduitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VueProduitPayload>
          }
          createMany: {
            args: Prisma.VueProduitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VueProduitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VueProduitPayload>
          }
          update: {
            args: Prisma.VueProduitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VueProduitPayload>
          }
          deleteMany: {
            args: Prisma.VueProduitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VueProduitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VueProduitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VueProduitPayload>
          }
          aggregate: {
            args: Prisma.VueProduitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVueProduit>
          }
          groupBy: {
            args: Prisma.VueProduitGroupByArgs<ExtArgs>
            result: $Utils.Optional<VueProduitGroupByOutputType>[]
          }
          count: {
            args: Prisma.VueProduitCountArgs<ExtArgs>
            result: $Utils.Optional<VueProduitCountAggregateOutputType> | number
          }
        }
      }
      Paiement: {
        payload: Prisma.$PaiementPayload<ExtArgs>
        fields: Prisma.PaiementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaiementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaiementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          findFirst: {
            args: Prisma.PaiementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaiementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          findMany: {
            args: Prisma.PaiementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>[]
          }
          create: {
            args: Prisma.PaiementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          createMany: {
            args: Prisma.PaiementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PaiementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          update: {
            args: Prisma.PaiementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          deleteMany: {
            args: Prisma.PaiementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaiementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaiementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          aggregate: {
            args: Prisma.PaiementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaiement>
          }
          groupBy: {
            args: Prisma.PaiementGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaiementGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaiementCountArgs<ExtArgs>
            result: $Utils.Optional<PaiementCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UtilisateurCountOutputType
   */

  export type UtilisateurCountOutputType = {
    produits: number
    notifications: number
    vuesProduites: number
    paiements: number
  }

  export type UtilisateurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produits?: boolean | UtilisateurCountOutputTypeCountProduitsArgs
    notifications?: boolean | UtilisateurCountOutputTypeCountNotificationsArgs
    vuesProduites?: boolean | UtilisateurCountOutputTypeCountVuesProduitesArgs
    paiements?: boolean | UtilisateurCountOutputTypeCountPaiementsArgs
  }

  // Custom InputTypes
  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UtilisateurCountOutputType
     */
    select?: UtilisateurCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountProduitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProduitWhereInput
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountVuesProduitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VueProduitWhereInput
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountPaiementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaiementWhereInput
  }


  /**
   * Count Type ProduitCountOutputType
   */

  export type ProduitCountOutputType = {
    vuesProduites: number
    paiements: number
  }

  export type ProduitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vuesProduites?: boolean | ProduitCountOutputTypeCountVuesProduitesArgs
    paiements?: boolean | ProduitCountOutputTypeCountPaiementsArgs
  }

  // Custom InputTypes
  /**
   * ProduitCountOutputType without action
   */
  export type ProduitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProduitCountOutputType
     */
    select?: ProduitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProduitCountOutputType without action
   */
  export type ProduitCountOutputTypeCountVuesProduitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VueProduitWhereInput
  }

  /**
   * ProduitCountOutputType without action
   */
  export type ProduitCountOutputTypeCountPaiementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaiementWhereInput
  }


  /**
   * Count Type PaiementCountOutputType
   */

  export type PaiementCountOutputType = {
    transactions: number
  }

  export type PaiementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | PaiementCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * PaiementCountOutputType without action
   */
  export type PaiementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaiementCountOutputType
     */
    select?: PaiementCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PaiementCountOutputType without action
   */
  export type PaiementCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Utilisateur
   */

  export type AggregateUtilisateur = {
    _count: UtilisateurCountAggregateOutputType | null
    _avg: UtilisateurAvgAggregateOutputType | null
    _sum: UtilisateurSumAggregateOutputType | null
    _min: UtilisateurMinAggregateOutputType | null
    _max: UtilisateurMaxAggregateOutputType | null
  }

  export type UtilisateurAvgAggregateOutputType = {
    id: number | null
  }

  export type UtilisateurSumAggregateOutputType = {
    id: number | null
  }

  export type UtilisateurMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    email: string | null
    telephone: string | null
    motDePasse: string | null
    role: $Enums.RoleUtilisateur | null
    estActif: boolean | null
    dateCreation: Date | null
    dateModification: Date | null
  }

  export type UtilisateurMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    email: string | null
    telephone: string | null
    motDePasse: string | null
    role: $Enums.RoleUtilisateur | null
    estActif: boolean | null
    dateCreation: Date | null
    dateModification: Date | null
  }

  export type UtilisateurCountAggregateOutputType = {
    id: number
    nom: number
    prenom: number
    email: number
    telephone: number
    motDePasse: number
    role: number
    estActif: number
    dateCreation: number
    dateModification: number
    _all: number
  }


  export type UtilisateurAvgAggregateInputType = {
    id?: true
  }

  export type UtilisateurSumAggregateInputType = {
    id?: true
  }

  export type UtilisateurMinAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    telephone?: true
    motDePasse?: true
    role?: true
    estActif?: true
    dateCreation?: true
    dateModification?: true
  }

  export type UtilisateurMaxAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    telephone?: true
    motDePasse?: true
    role?: true
    estActif?: true
    dateCreation?: true
    dateModification?: true
  }

  export type UtilisateurCountAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    telephone?: true
    motDePasse?: true
    role?: true
    estActif?: true
    dateCreation?: true
    dateModification?: true
    _all?: true
  }

  export type UtilisateurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilisateur to aggregate.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Utilisateurs
    **/
    _count?: true | UtilisateurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UtilisateurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UtilisateurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UtilisateurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UtilisateurMaxAggregateInputType
  }

  export type GetUtilisateurAggregateType<T extends UtilisateurAggregateArgs> = {
        [P in keyof T & keyof AggregateUtilisateur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUtilisateur[P]>
      : GetScalarType<T[P], AggregateUtilisateur[P]>
  }




  export type UtilisateurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UtilisateurWhereInput
    orderBy?: UtilisateurOrderByWithAggregationInput | UtilisateurOrderByWithAggregationInput[]
    by: UtilisateurScalarFieldEnum[] | UtilisateurScalarFieldEnum
    having?: UtilisateurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UtilisateurCountAggregateInputType | true
    _avg?: UtilisateurAvgAggregateInputType
    _sum?: UtilisateurSumAggregateInputType
    _min?: UtilisateurMinAggregateInputType
    _max?: UtilisateurMaxAggregateInputType
  }

  export type UtilisateurGroupByOutputType = {
    id: number
    nom: string
    prenom: string | null
    email: string
    telephone: string | null
    motDePasse: string
    role: $Enums.RoleUtilisateur
    estActif: boolean
    dateCreation: Date
    dateModification: Date
    _count: UtilisateurCountAggregateOutputType | null
    _avg: UtilisateurAvgAggregateOutputType | null
    _sum: UtilisateurSumAggregateOutputType | null
    _min: UtilisateurMinAggregateOutputType | null
    _max: UtilisateurMaxAggregateOutputType | null
  }

  type GetUtilisateurGroupByPayload<T extends UtilisateurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UtilisateurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UtilisateurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UtilisateurGroupByOutputType[P]>
            : GetScalarType<T[P], UtilisateurGroupByOutputType[P]>
        }
      >
    >


  export type UtilisateurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    telephone?: boolean
    motDePasse?: boolean
    role?: boolean
    estActif?: boolean
    dateCreation?: boolean
    dateModification?: boolean
    produits?: boolean | Utilisateur$produitsArgs<ExtArgs>
    notifications?: boolean | Utilisateur$notificationsArgs<ExtArgs>
    vuesProduites?: boolean | Utilisateur$vuesProduitesArgs<ExtArgs>
    paiements?: boolean | Utilisateur$paiementsArgs<ExtArgs>
    _count?: boolean | UtilisateurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["utilisateur"]>


  export type UtilisateurSelectScalar = {
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    telephone?: boolean
    motDePasse?: boolean
    role?: boolean
    estActif?: boolean
    dateCreation?: boolean
    dateModification?: boolean
  }

  export type UtilisateurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produits?: boolean | Utilisateur$produitsArgs<ExtArgs>
    notifications?: boolean | Utilisateur$notificationsArgs<ExtArgs>
    vuesProduites?: boolean | Utilisateur$vuesProduitesArgs<ExtArgs>
    paiements?: boolean | Utilisateur$paiementsArgs<ExtArgs>
    _count?: boolean | UtilisateurCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UtilisateurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Utilisateur"
    objects: {
      produits: Prisma.$ProduitPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      vuesProduites: Prisma.$VueProduitPayload<ExtArgs>[]
      paiements: Prisma.$PaiementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      prenom: string | null
      email: string
      telephone: string | null
      motDePasse: string
      role: $Enums.RoleUtilisateur
      estActif: boolean
      dateCreation: Date
      dateModification: Date
    }, ExtArgs["result"]["utilisateur"]>
    composites: {}
  }

  type UtilisateurGetPayload<S extends boolean | null | undefined | UtilisateurDefaultArgs> = $Result.GetResult<Prisma.$UtilisateurPayload, S>

  type UtilisateurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UtilisateurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UtilisateurCountAggregateInputType | true
    }

  export interface UtilisateurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Utilisateur'], meta: { name: 'Utilisateur' } }
    /**
     * Find zero or one Utilisateur that matches the filter.
     * @param {UtilisateurFindUniqueArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UtilisateurFindUniqueArgs>(args: SelectSubset<T, UtilisateurFindUniqueArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Utilisateur that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UtilisateurFindUniqueOrThrowArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UtilisateurFindUniqueOrThrowArgs>(args: SelectSubset<T, UtilisateurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Utilisateur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindFirstArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UtilisateurFindFirstArgs>(args?: SelectSubset<T, UtilisateurFindFirstArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Utilisateur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindFirstOrThrowArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UtilisateurFindFirstOrThrowArgs>(args?: SelectSubset<T, UtilisateurFindFirstOrThrowArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Utilisateurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Utilisateurs
     * const utilisateurs = await prisma.utilisateur.findMany()
     * 
     * // Get first 10 Utilisateurs
     * const utilisateurs = await prisma.utilisateur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const utilisateurWithIdOnly = await prisma.utilisateur.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UtilisateurFindManyArgs>(args?: SelectSubset<T, UtilisateurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Utilisateur.
     * @param {UtilisateurCreateArgs} args - Arguments to create a Utilisateur.
     * @example
     * // Create one Utilisateur
     * const Utilisateur = await prisma.utilisateur.create({
     *   data: {
     *     // ... data to create a Utilisateur
     *   }
     * })
     * 
     */
    create<T extends UtilisateurCreateArgs>(args: SelectSubset<T, UtilisateurCreateArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Utilisateurs.
     * @param {UtilisateurCreateManyArgs} args - Arguments to create many Utilisateurs.
     * @example
     * // Create many Utilisateurs
     * const utilisateur = await prisma.utilisateur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UtilisateurCreateManyArgs>(args?: SelectSubset<T, UtilisateurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Utilisateur.
     * @param {UtilisateurDeleteArgs} args - Arguments to delete one Utilisateur.
     * @example
     * // Delete one Utilisateur
     * const Utilisateur = await prisma.utilisateur.delete({
     *   where: {
     *     // ... filter to delete one Utilisateur
     *   }
     * })
     * 
     */
    delete<T extends UtilisateurDeleteArgs>(args: SelectSubset<T, UtilisateurDeleteArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Utilisateur.
     * @param {UtilisateurUpdateArgs} args - Arguments to update one Utilisateur.
     * @example
     * // Update one Utilisateur
     * const utilisateur = await prisma.utilisateur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UtilisateurUpdateArgs>(args: SelectSubset<T, UtilisateurUpdateArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Utilisateurs.
     * @param {UtilisateurDeleteManyArgs} args - Arguments to filter Utilisateurs to delete.
     * @example
     * // Delete a few Utilisateurs
     * const { count } = await prisma.utilisateur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UtilisateurDeleteManyArgs>(args?: SelectSubset<T, UtilisateurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Utilisateurs
     * const utilisateur = await prisma.utilisateur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UtilisateurUpdateManyArgs>(args: SelectSubset<T, UtilisateurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Utilisateur.
     * @param {UtilisateurUpsertArgs} args - Arguments to update or create a Utilisateur.
     * @example
     * // Update or create a Utilisateur
     * const utilisateur = await prisma.utilisateur.upsert({
     *   create: {
     *     // ... data to create a Utilisateur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Utilisateur we want to update
     *   }
     * })
     */
    upsert<T extends UtilisateurUpsertArgs>(args: SelectSubset<T, UtilisateurUpsertArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurCountArgs} args - Arguments to filter Utilisateurs to count.
     * @example
     * // Count the number of Utilisateurs
     * const count = await prisma.utilisateur.count({
     *   where: {
     *     // ... the filter for the Utilisateurs we want to count
     *   }
     * })
    **/
    count<T extends UtilisateurCountArgs>(
      args?: Subset<T, UtilisateurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UtilisateurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Utilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UtilisateurAggregateArgs>(args: Subset<T, UtilisateurAggregateArgs>): Prisma.PrismaPromise<GetUtilisateurAggregateType<T>>

    /**
     * Group by Utilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UtilisateurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UtilisateurGroupByArgs['orderBy'] }
        : { orderBy?: UtilisateurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UtilisateurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUtilisateurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Utilisateur model
   */
  readonly fields: UtilisateurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Utilisateur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UtilisateurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    produits<T extends Utilisateur$produitsArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$produitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends Utilisateur$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    vuesProduites<T extends Utilisateur$vuesProduitesArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$vuesProduitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VueProduitPayload<ExtArgs>, T, "findMany"> | Null>
    paiements<T extends Utilisateur$paiementsArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$paiementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Utilisateur model
   */ 
  interface UtilisateurFieldRefs {
    readonly id: FieldRef<"Utilisateur", 'Int'>
    readonly nom: FieldRef<"Utilisateur", 'String'>
    readonly prenom: FieldRef<"Utilisateur", 'String'>
    readonly email: FieldRef<"Utilisateur", 'String'>
    readonly telephone: FieldRef<"Utilisateur", 'String'>
    readonly motDePasse: FieldRef<"Utilisateur", 'String'>
    readonly role: FieldRef<"Utilisateur", 'RoleUtilisateur'>
    readonly estActif: FieldRef<"Utilisateur", 'Boolean'>
    readonly dateCreation: FieldRef<"Utilisateur", 'DateTime'>
    readonly dateModification: FieldRef<"Utilisateur", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Utilisateur findUnique
   */
  export type UtilisateurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur findUniqueOrThrow
   */
  export type UtilisateurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur findFirst
   */
  export type UtilisateurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilisateurs.
     */
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur findFirstOrThrow
   */
  export type UtilisateurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilisateurs.
     */
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur findMany
   */
  export type UtilisateurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateurs to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur create
   */
  export type UtilisateurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * The data needed to create a Utilisateur.
     */
    data: XOR<UtilisateurCreateInput, UtilisateurUncheckedCreateInput>
  }

  /**
   * Utilisateur createMany
   */
  export type UtilisateurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Utilisateurs.
     */
    data: UtilisateurCreateManyInput | UtilisateurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Utilisateur update
   */
  export type UtilisateurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * The data needed to update a Utilisateur.
     */
    data: XOR<UtilisateurUpdateInput, UtilisateurUncheckedUpdateInput>
    /**
     * Choose, which Utilisateur to update.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur updateMany
   */
  export type UtilisateurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Utilisateurs.
     */
    data: XOR<UtilisateurUpdateManyMutationInput, UtilisateurUncheckedUpdateManyInput>
    /**
     * Filter which Utilisateurs to update
     */
    where?: UtilisateurWhereInput
  }

  /**
   * Utilisateur upsert
   */
  export type UtilisateurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * The filter to search for the Utilisateur to update in case it exists.
     */
    where: UtilisateurWhereUniqueInput
    /**
     * In case the Utilisateur found by the `where` argument doesn't exist, create a new Utilisateur with this data.
     */
    create: XOR<UtilisateurCreateInput, UtilisateurUncheckedCreateInput>
    /**
     * In case the Utilisateur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UtilisateurUpdateInput, UtilisateurUncheckedUpdateInput>
  }

  /**
   * Utilisateur delete
   */
  export type UtilisateurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter which Utilisateur to delete.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur deleteMany
   */
  export type UtilisateurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilisateurs to delete
     */
    where?: UtilisateurWhereInput
  }

  /**
   * Utilisateur.produits
   */
  export type Utilisateur$produitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    where?: ProduitWhereInput
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    cursor?: ProduitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Utilisateur.notifications
   */
  export type Utilisateur$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Utilisateur.vuesProduites
   */
  export type Utilisateur$vuesProduitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VueProduit
     */
    select?: VueProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VueProduitInclude<ExtArgs> | null
    where?: VueProduitWhereInput
    orderBy?: VueProduitOrderByWithRelationInput | VueProduitOrderByWithRelationInput[]
    cursor?: VueProduitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VueProduitScalarFieldEnum | VueProduitScalarFieldEnum[]
  }

  /**
   * Utilisateur.paiements
   */
  export type Utilisateur$paiementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    where?: PaiementWhereInput
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    cursor?: PaiementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaiementScalarFieldEnum | PaiementScalarFieldEnum[]
  }

  /**
   * Utilisateur without action
   */
  export type UtilisateurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
  }


  /**
   * Model Produit
   */

  export type AggregateProduit = {
    _count: ProduitCountAggregateOutputType | null
    _avg: ProduitAvgAggregateOutputType | null
    _sum: ProduitSumAggregateOutputType | null
    _min: ProduitMinAggregateOutputType | null
    _max: ProduitMaxAggregateOutputType | null
  }

  export type ProduitAvgAggregateOutputType = {
    id: number | null
    prix: number | null
    vues: number | null
    utilisateurId: number | null
  }

  export type ProduitSumAggregateOutputType = {
    id: number | null
    prix: number | null
    vues: number | null
    utilisateurId: number | null
  }

  export type ProduitMinAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
    prix: number | null
    estVip: boolean | null
    imageUrl: string | null
    imagePublicId: string | null
    vues: number | null
    statut: $Enums.StatutProduit | null
    localisation: string | null
    categorie: string | null
    dateCreation: Date | null
    dateModification: Date | null
    dateExpiration: Date | null
    utilisateurId: number | null
  }

  export type ProduitMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
    prix: number | null
    estVip: boolean | null
    imageUrl: string | null
    imagePublicId: string | null
    vues: number | null
    statut: $Enums.StatutProduit | null
    localisation: string | null
    categorie: string | null
    dateCreation: Date | null
    dateModification: Date | null
    dateExpiration: Date | null
    utilisateurId: number | null
  }

  export type ProduitCountAggregateOutputType = {
    id: number
    titre: number
    description: number
    prix: number
    estVip: number
    imageUrl: number
    imagePublicId: number
    vues: number
    statut: number
    localisation: number
    categorie: number
    dateCreation: number
    dateModification: number
    dateExpiration: number
    utilisateurId: number
    _all: number
  }


  export type ProduitAvgAggregateInputType = {
    id?: true
    prix?: true
    vues?: true
    utilisateurId?: true
  }

  export type ProduitSumAggregateInputType = {
    id?: true
    prix?: true
    vues?: true
    utilisateurId?: true
  }

  export type ProduitMinAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    prix?: true
    estVip?: true
    imageUrl?: true
    imagePublicId?: true
    vues?: true
    statut?: true
    localisation?: true
    categorie?: true
    dateCreation?: true
    dateModification?: true
    dateExpiration?: true
    utilisateurId?: true
  }

  export type ProduitMaxAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    prix?: true
    estVip?: true
    imageUrl?: true
    imagePublicId?: true
    vues?: true
    statut?: true
    localisation?: true
    categorie?: true
    dateCreation?: true
    dateModification?: true
    dateExpiration?: true
    utilisateurId?: true
  }

  export type ProduitCountAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    prix?: true
    estVip?: true
    imageUrl?: true
    imagePublicId?: true
    vues?: true
    statut?: true
    localisation?: true
    categorie?: true
    dateCreation?: true
    dateModification?: true
    dateExpiration?: true
    utilisateurId?: true
    _all?: true
  }

  export type ProduitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produit to aggregate.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produits
    **/
    _count?: true | ProduitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProduitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProduitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProduitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProduitMaxAggregateInputType
  }

  export type GetProduitAggregateType<T extends ProduitAggregateArgs> = {
        [P in keyof T & keyof AggregateProduit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduit[P]>
      : GetScalarType<T[P], AggregateProduit[P]>
  }




  export type ProduitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProduitWhereInput
    orderBy?: ProduitOrderByWithAggregationInput | ProduitOrderByWithAggregationInput[]
    by: ProduitScalarFieldEnum[] | ProduitScalarFieldEnum
    having?: ProduitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProduitCountAggregateInputType | true
    _avg?: ProduitAvgAggregateInputType
    _sum?: ProduitSumAggregateInputType
    _min?: ProduitMinAggregateInputType
    _max?: ProduitMaxAggregateInputType
  }

  export type ProduitGroupByOutputType = {
    id: number
    titre: string
    description: string
    prix: number
    estVip: boolean
    imageUrl: string
    imagePublicId: string | null
    vues: number
    statut: $Enums.StatutProduit
    localisation: string | null
    categorie: string | null
    dateCreation: Date
    dateModification: Date
    dateExpiration: Date
    utilisateurId: number
    _count: ProduitCountAggregateOutputType | null
    _avg: ProduitAvgAggregateOutputType | null
    _sum: ProduitSumAggregateOutputType | null
    _min: ProduitMinAggregateOutputType | null
    _max: ProduitMaxAggregateOutputType | null
  }

  type GetProduitGroupByPayload<T extends ProduitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProduitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProduitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProduitGroupByOutputType[P]>
            : GetScalarType<T[P], ProduitGroupByOutputType[P]>
        }
      >
    >


  export type ProduitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    description?: boolean
    prix?: boolean
    estVip?: boolean
    imageUrl?: boolean
    imagePublicId?: boolean
    vues?: boolean
    statut?: boolean
    localisation?: boolean
    categorie?: boolean
    dateCreation?: boolean
    dateModification?: boolean
    dateExpiration?: boolean
    utilisateurId?: boolean
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    vuesProduites?: boolean | Produit$vuesProduitesArgs<ExtArgs>
    paiements?: boolean | Produit$paiementsArgs<ExtArgs>
    _count?: boolean | ProduitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produit"]>


  export type ProduitSelectScalar = {
    id?: boolean
    titre?: boolean
    description?: boolean
    prix?: boolean
    estVip?: boolean
    imageUrl?: boolean
    imagePublicId?: boolean
    vues?: boolean
    statut?: boolean
    localisation?: boolean
    categorie?: boolean
    dateCreation?: boolean
    dateModification?: boolean
    dateExpiration?: boolean
    utilisateurId?: boolean
  }

  export type ProduitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    vuesProduites?: boolean | Produit$vuesProduitesArgs<ExtArgs>
    paiements?: boolean | Produit$paiementsArgs<ExtArgs>
    _count?: boolean | ProduitCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProduitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produit"
    objects: {
      utilisateur: Prisma.$UtilisateurPayload<ExtArgs>
      vuesProduites: Prisma.$VueProduitPayload<ExtArgs>[]
      paiements: Prisma.$PaiementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titre: string
      description: string
      prix: number
      estVip: boolean
      imageUrl: string
      imagePublicId: string | null
      vues: number
      statut: $Enums.StatutProduit
      localisation: string | null
      categorie: string | null
      dateCreation: Date
      dateModification: Date
      dateExpiration: Date
      utilisateurId: number
    }, ExtArgs["result"]["produit"]>
    composites: {}
  }

  type ProduitGetPayload<S extends boolean | null | undefined | ProduitDefaultArgs> = $Result.GetResult<Prisma.$ProduitPayload, S>

  type ProduitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProduitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProduitCountAggregateInputType | true
    }

  export interface ProduitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produit'], meta: { name: 'Produit' } }
    /**
     * Find zero or one Produit that matches the filter.
     * @param {ProduitFindUniqueArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProduitFindUniqueArgs>(args: SelectSubset<T, ProduitFindUniqueArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Produit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProduitFindUniqueOrThrowArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProduitFindUniqueOrThrowArgs>(args: SelectSubset<T, ProduitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Produit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitFindFirstArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProduitFindFirstArgs>(args?: SelectSubset<T, ProduitFindFirstArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Produit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitFindFirstOrThrowArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProduitFindFirstOrThrowArgs>(args?: SelectSubset<T, ProduitFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Produits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produits
     * const produits = await prisma.produit.findMany()
     * 
     * // Get first 10 Produits
     * const produits = await prisma.produit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produitWithIdOnly = await prisma.produit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProduitFindManyArgs>(args?: SelectSubset<T, ProduitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Produit.
     * @param {ProduitCreateArgs} args - Arguments to create a Produit.
     * @example
     * // Create one Produit
     * const Produit = await prisma.produit.create({
     *   data: {
     *     // ... data to create a Produit
     *   }
     * })
     * 
     */
    create<T extends ProduitCreateArgs>(args: SelectSubset<T, ProduitCreateArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Produits.
     * @param {ProduitCreateManyArgs} args - Arguments to create many Produits.
     * @example
     * // Create many Produits
     * const produit = await prisma.produit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProduitCreateManyArgs>(args?: SelectSubset<T, ProduitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produit.
     * @param {ProduitDeleteArgs} args - Arguments to delete one Produit.
     * @example
     * // Delete one Produit
     * const Produit = await prisma.produit.delete({
     *   where: {
     *     // ... filter to delete one Produit
     *   }
     * })
     * 
     */
    delete<T extends ProduitDeleteArgs>(args: SelectSubset<T, ProduitDeleteArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Produit.
     * @param {ProduitUpdateArgs} args - Arguments to update one Produit.
     * @example
     * // Update one Produit
     * const produit = await prisma.produit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProduitUpdateArgs>(args: SelectSubset<T, ProduitUpdateArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Produits.
     * @param {ProduitDeleteManyArgs} args - Arguments to filter Produits to delete.
     * @example
     * // Delete a few Produits
     * const { count } = await prisma.produit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProduitDeleteManyArgs>(args?: SelectSubset<T, ProduitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produits
     * const produit = await prisma.produit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProduitUpdateManyArgs>(args: SelectSubset<T, ProduitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produit.
     * @param {ProduitUpsertArgs} args - Arguments to update or create a Produit.
     * @example
     * // Update or create a Produit
     * const produit = await prisma.produit.upsert({
     *   create: {
     *     // ... data to create a Produit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produit we want to update
     *   }
     * })
     */
    upsert<T extends ProduitUpsertArgs>(args: SelectSubset<T, ProduitUpsertArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Produits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitCountArgs} args - Arguments to filter Produits to count.
     * @example
     * // Count the number of Produits
     * const count = await prisma.produit.count({
     *   where: {
     *     // ... the filter for the Produits we want to count
     *   }
     * })
    **/
    count<T extends ProduitCountArgs>(
      args?: Subset<T, ProduitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProduitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProduitAggregateArgs>(args: Subset<T, ProduitAggregateArgs>): Prisma.PrismaPromise<GetProduitAggregateType<T>>

    /**
     * Group by Produit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProduitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProduitGroupByArgs['orderBy'] }
        : { orderBy?: ProduitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProduitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produit model
   */
  readonly fields: ProduitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProduitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    utilisateur<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    vuesProduites<T extends Produit$vuesProduitesArgs<ExtArgs> = {}>(args?: Subset<T, Produit$vuesProduitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VueProduitPayload<ExtArgs>, T, "findMany"> | Null>
    paiements<T extends Produit$paiementsArgs<ExtArgs> = {}>(args?: Subset<T, Produit$paiementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Produit model
   */ 
  interface ProduitFieldRefs {
    readonly id: FieldRef<"Produit", 'Int'>
    readonly titre: FieldRef<"Produit", 'String'>
    readonly description: FieldRef<"Produit", 'String'>
    readonly prix: FieldRef<"Produit", 'Float'>
    readonly estVip: FieldRef<"Produit", 'Boolean'>
    readonly imageUrl: FieldRef<"Produit", 'String'>
    readonly imagePublicId: FieldRef<"Produit", 'String'>
    readonly vues: FieldRef<"Produit", 'Int'>
    readonly statut: FieldRef<"Produit", 'StatutProduit'>
    readonly localisation: FieldRef<"Produit", 'String'>
    readonly categorie: FieldRef<"Produit", 'String'>
    readonly dateCreation: FieldRef<"Produit", 'DateTime'>
    readonly dateModification: FieldRef<"Produit", 'DateTime'>
    readonly dateExpiration: FieldRef<"Produit", 'DateTime'>
    readonly utilisateurId: FieldRef<"Produit", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Produit findUnique
   */
  export type ProduitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit findUniqueOrThrow
   */
  export type ProduitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit findFirst
   */
  export type ProduitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produits.
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produits.
     */
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Produit findFirstOrThrow
   */
  export type ProduitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produits.
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produits.
     */
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Produit findMany
   */
  export type ProduitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produits to fetch.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produits.
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Produit create
   */
  export type ProduitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * The data needed to create a Produit.
     */
    data: XOR<ProduitCreateInput, ProduitUncheckedCreateInput>
  }

  /**
   * Produit createMany
   */
  export type ProduitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produits.
     */
    data: ProduitCreateManyInput | ProduitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Produit update
   */
  export type ProduitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * The data needed to update a Produit.
     */
    data: XOR<ProduitUpdateInput, ProduitUncheckedUpdateInput>
    /**
     * Choose, which Produit to update.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit updateMany
   */
  export type ProduitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produits.
     */
    data: XOR<ProduitUpdateManyMutationInput, ProduitUncheckedUpdateManyInput>
    /**
     * Filter which Produits to update
     */
    where?: ProduitWhereInput
  }

  /**
   * Produit upsert
   */
  export type ProduitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * The filter to search for the Produit to update in case it exists.
     */
    where: ProduitWhereUniqueInput
    /**
     * In case the Produit found by the `where` argument doesn't exist, create a new Produit with this data.
     */
    create: XOR<ProduitCreateInput, ProduitUncheckedCreateInput>
    /**
     * In case the Produit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProduitUpdateInput, ProduitUncheckedUpdateInput>
  }

  /**
   * Produit delete
   */
  export type ProduitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter which Produit to delete.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit deleteMany
   */
  export type ProduitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produits to delete
     */
    where?: ProduitWhereInput
  }

  /**
   * Produit.vuesProduites
   */
  export type Produit$vuesProduitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VueProduit
     */
    select?: VueProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VueProduitInclude<ExtArgs> | null
    where?: VueProduitWhereInput
    orderBy?: VueProduitOrderByWithRelationInput | VueProduitOrderByWithRelationInput[]
    cursor?: VueProduitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VueProduitScalarFieldEnum | VueProduitScalarFieldEnum[]
  }

  /**
   * Produit.paiements
   */
  export type Produit$paiementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    where?: PaiementWhereInput
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    cursor?: PaiementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaiementScalarFieldEnum | PaiementScalarFieldEnum[]
  }

  /**
   * Produit without action
   */
  export type ProduitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    utilisateurId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    utilisateurId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    titre: string | null
    message: string | null
    type: $Enums.TypeNotification | null
    estLue: boolean | null
    dateCreation: Date | null
    utilisateurId: number | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    message: string | null
    type: $Enums.TypeNotification | null
    estLue: boolean | null
    dateCreation: Date | null
    utilisateurId: number | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    titre: number
    message: number
    type: number
    estLue: number
    dateCreation: number
    utilisateurId: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    utilisateurId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    utilisateurId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    titre?: true
    message?: true
    type?: true
    estLue?: true
    dateCreation?: true
    utilisateurId?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    titre?: true
    message?: true
    type?: true
    estLue?: true
    dateCreation?: true
    utilisateurId?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    titre?: true
    message?: true
    type?: true
    estLue?: true
    dateCreation?: true
    utilisateurId?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    titre: string
    message: string
    type: $Enums.TypeNotification
    estLue: boolean
    dateCreation: Date
    utilisateurId: number
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    message?: boolean
    type?: boolean
    estLue?: boolean
    dateCreation?: boolean
    utilisateurId?: boolean
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>


  export type NotificationSelectScalar = {
    id?: boolean
    titre?: boolean
    message?: boolean
    type?: boolean
    estLue?: boolean
    dateCreation?: boolean
    utilisateurId?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      utilisateur: Prisma.$UtilisateurPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titre: string
      message: string
      type: $Enums.TypeNotification
      estLue: boolean
      dateCreation: Date
      utilisateurId: number
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    utilisateur<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly titre: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'TypeNotification'>
    readonly estLue: FieldRef<"Notification", 'Boolean'>
    readonly dateCreation: FieldRef<"Notification", 'DateTime'>
    readonly utilisateurId: FieldRef<"Notification", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model VueProduit
   */

  export type AggregateVueProduit = {
    _count: VueProduitCountAggregateOutputType | null
    _avg: VueProduitAvgAggregateOutputType | null
    _sum: VueProduitSumAggregateOutputType | null
    _min: VueProduitMinAggregateOutputType | null
    _max: VueProduitMaxAggregateOutputType | null
  }

  export type VueProduitAvgAggregateOutputType = {
    id: number | null
    produitId: number | null
    utilisateurId: number | null
  }

  export type VueProduitSumAggregateOutputType = {
    id: number | null
    produitId: number | null
    utilisateurId: number | null
  }

  export type VueProduitMinAggregateOutputType = {
    id: number | null
    dateVue: Date | null
    adresseIp: string | null
    produitId: number | null
    utilisateurId: number | null
  }

  export type VueProduitMaxAggregateOutputType = {
    id: number | null
    dateVue: Date | null
    adresseIp: string | null
    produitId: number | null
    utilisateurId: number | null
  }

  export type VueProduitCountAggregateOutputType = {
    id: number
    dateVue: number
    adresseIp: number
    produitId: number
    utilisateurId: number
    _all: number
  }


  export type VueProduitAvgAggregateInputType = {
    id?: true
    produitId?: true
    utilisateurId?: true
  }

  export type VueProduitSumAggregateInputType = {
    id?: true
    produitId?: true
    utilisateurId?: true
  }

  export type VueProduitMinAggregateInputType = {
    id?: true
    dateVue?: true
    adresseIp?: true
    produitId?: true
    utilisateurId?: true
  }

  export type VueProduitMaxAggregateInputType = {
    id?: true
    dateVue?: true
    adresseIp?: true
    produitId?: true
    utilisateurId?: true
  }

  export type VueProduitCountAggregateInputType = {
    id?: true
    dateVue?: true
    adresseIp?: true
    produitId?: true
    utilisateurId?: true
    _all?: true
  }

  export type VueProduitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VueProduit to aggregate.
     */
    where?: VueProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VueProduits to fetch.
     */
    orderBy?: VueProduitOrderByWithRelationInput | VueProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VueProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VueProduits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VueProduits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VueProduits
    **/
    _count?: true | VueProduitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VueProduitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VueProduitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VueProduitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VueProduitMaxAggregateInputType
  }

  export type GetVueProduitAggregateType<T extends VueProduitAggregateArgs> = {
        [P in keyof T & keyof AggregateVueProduit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVueProduit[P]>
      : GetScalarType<T[P], AggregateVueProduit[P]>
  }




  export type VueProduitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VueProduitWhereInput
    orderBy?: VueProduitOrderByWithAggregationInput | VueProduitOrderByWithAggregationInput[]
    by: VueProduitScalarFieldEnum[] | VueProduitScalarFieldEnum
    having?: VueProduitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VueProduitCountAggregateInputType | true
    _avg?: VueProduitAvgAggregateInputType
    _sum?: VueProduitSumAggregateInputType
    _min?: VueProduitMinAggregateInputType
    _max?: VueProduitMaxAggregateInputType
  }

  export type VueProduitGroupByOutputType = {
    id: number
    dateVue: Date
    adresseIp: string | null
    produitId: number
    utilisateurId: number | null
    _count: VueProduitCountAggregateOutputType | null
    _avg: VueProduitAvgAggregateOutputType | null
    _sum: VueProduitSumAggregateOutputType | null
    _min: VueProduitMinAggregateOutputType | null
    _max: VueProduitMaxAggregateOutputType | null
  }

  type GetVueProduitGroupByPayload<T extends VueProduitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VueProduitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VueProduitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VueProduitGroupByOutputType[P]>
            : GetScalarType<T[P], VueProduitGroupByOutputType[P]>
        }
      >
    >


  export type VueProduitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateVue?: boolean
    adresseIp?: boolean
    produitId?: boolean
    utilisateurId?: boolean
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
    utilisateur?: boolean | VueProduit$utilisateurArgs<ExtArgs>
  }, ExtArgs["result"]["vueProduit"]>


  export type VueProduitSelectScalar = {
    id?: boolean
    dateVue?: boolean
    adresseIp?: boolean
    produitId?: boolean
    utilisateurId?: boolean
  }

  export type VueProduitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
    utilisateur?: boolean | VueProduit$utilisateurArgs<ExtArgs>
  }

  export type $VueProduitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VueProduit"
    objects: {
      produit: Prisma.$ProduitPayload<ExtArgs>
      utilisateur: Prisma.$UtilisateurPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dateVue: Date
      adresseIp: string | null
      produitId: number
      utilisateurId: number | null
    }, ExtArgs["result"]["vueProduit"]>
    composites: {}
  }

  type VueProduitGetPayload<S extends boolean | null | undefined | VueProduitDefaultArgs> = $Result.GetResult<Prisma.$VueProduitPayload, S>

  type VueProduitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VueProduitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VueProduitCountAggregateInputType | true
    }

  export interface VueProduitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VueProduit'], meta: { name: 'VueProduit' } }
    /**
     * Find zero or one VueProduit that matches the filter.
     * @param {VueProduitFindUniqueArgs} args - Arguments to find a VueProduit
     * @example
     * // Get one VueProduit
     * const vueProduit = await prisma.vueProduit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VueProduitFindUniqueArgs>(args: SelectSubset<T, VueProduitFindUniqueArgs<ExtArgs>>): Prisma__VueProduitClient<$Result.GetResult<Prisma.$VueProduitPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VueProduit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VueProduitFindUniqueOrThrowArgs} args - Arguments to find a VueProduit
     * @example
     * // Get one VueProduit
     * const vueProduit = await prisma.vueProduit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VueProduitFindUniqueOrThrowArgs>(args: SelectSubset<T, VueProduitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VueProduitClient<$Result.GetResult<Prisma.$VueProduitPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VueProduit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VueProduitFindFirstArgs} args - Arguments to find a VueProduit
     * @example
     * // Get one VueProduit
     * const vueProduit = await prisma.vueProduit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VueProduitFindFirstArgs>(args?: SelectSubset<T, VueProduitFindFirstArgs<ExtArgs>>): Prisma__VueProduitClient<$Result.GetResult<Prisma.$VueProduitPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VueProduit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VueProduitFindFirstOrThrowArgs} args - Arguments to find a VueProduit
     * @example
     * // Get one VueProduit
     * const vueProduit = await prisma.vueProduit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VueProduitFindFirstOrThrowArgs>(args?: SelectSubset<T, VueProduitFindFirstOrThrowArgs<ExtArgs>>): Prisma__VueProduitClient<$Result.GetResult<Prisma.$VueProduitPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VueProduits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VueProduitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VueProduits
     * const vueProduits = await prisma.vueProduit.findMany()
     * 
     * // Get first 10 VueProduits
     * const vueProduits = await prisma.vueProduit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vueProduitWithIdOnly = await prisma.vueProduit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VueProduitFindManyArgs>(args?: SelectSubset<T, VueProduitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VueProduitPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VueProduit.
     * @param {VueProduitCreateArgs} args - Arguments to create a VueProduit.
     * @example
     * // Create one VueProduit
     * const VueProduit = await prisma.vueProduit.create({
     *   data: {
     *     // ... data to create a VueProduit
     *   }
     * })
     * 
     */
    create<T extends VueProduitCreateArgs>(args: SelectSubset<T, VueProduitCreateArgs<ExtArgs>>): Prisma__VueProduitClient<$Result.GetResult<Prisma.$VueProduitPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VueProduits.
     * @param {VueProduitCreateManyArgs} args - Arguments to create many VueProduits.
     * @example
     * // Create many VueProduits
     * const vueProduit = await prisma.vueProduit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VueProduitCreateManyArgs>(args?: SelectSubset<T, VueProduitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VueProduit.
     * @param {VueProduitDeleteArgs} args - Arguments to delete one VueProduit.
     * @example
     * // Delete one VueProduit
     * const VueProduit = await prisma.vueProduit.delete({
     *   where: {
     *     // ... filter to delete one VueProduit
     *   }
     * })
     * 
     */
    delete<T extends VueProduitDeleteArgs>(args: SelectSubset<T, VueProduitDeleteArgs<ExtArgs>>): Prisma__VueProduitClient<$Result.GetResult<Prisma.$VueProduitPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VueProduit.
     * @param {VueProduitUpdateArgs} args - Arguments to update one VueProduit.
     * @example
     * // Update one VueProduit
     * const vueProduit = await prisma.vueProduit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VueProduitUpdateArgs>(args: SelectSubset<T, VueProduitUpdateArgs<ExtArgs>>): Prisma__VueProduitClient<$Result.GetResult<Prisma.$VueProduitPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VueProduits.
     * @param {VueProduitDeleteManyArgs} args - Arguments to filter VueProduits to delete.
     * @example
     * // Delete a few VueProduits
     * const { count } = await prisma.vueProduit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VueProduitDeleteManyArgs>(args?: SelectSubset<T, VueProduitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VueProduits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VueProduitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VueProduits
     * const vueProduit = await prisma.vueProduit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VueProduitUpdateManyArgs>(args: SelectSubset<T, VueProduitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VueProduit.
     * @param {VueProduitUpsertArgs} args - Arguments to update or create a VueProduit.
     * @example
     * // Update or create a VueProduit
     * const vueProduit = await prisma.vueProduit.upsert({
     *   create: {
     *     // ... data to create a VueProduit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VueProduit we want to update
     *   }
     * })
     */
    upsert<T extends VueProduitUpsertArgs>(args: SelectSubset<T, VueProduitUpsertArgs<ExtArgs>>): Prisma__VueProduitClient<$Result.GetResult<Prisma.$VueProduitPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VueProduits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VueProduitCountArgs} args - Arguments to filter VueProduits to count.
     * @example
     * // Count the number of VueProduits
     * const count = await prisma.vueProduit.count({
     *   where: {
     *     // ... the filter for the VueProduits we want to count
     *   }
     * })
    **/
    count<T extends VueProduitCountArgs>(
      args?: Subset<T, VueProduitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VueProduitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VueProduit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VueProduitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VueProduitAggregateArgs>(args: Subset<T, VueProduitAggregateArgs>): Prisma.PrismaPromise<GetVueProduitAggregateType<T>>

    /**
     * Group by VueProduit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VueProduitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VueProduitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VueProduitGroupByArgs['orderBy'] }
        : { orderBy?: VueProduitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VueProduitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVueProduitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VueProduit model
   */
  readonly fields: VueProduitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VueProduit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VueProduitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    produit<T extends ProduitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProduitDefaultArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    utilisateur<T extends VueProduit$utilisateurArgs<ExtArgs> = {}>(args?: Subset<T, VueProduit$utilisateurArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VueProduit model
   */ 
  interface VueProduitFieldRefs {
    readonly id: FieldRef<"VueProduit", 'Int'>
    readonly dateVue: FieldRef<"VueProduit", 'DateTime'>
    readonly adresseIp: FieldRef<"VueProduit", 'String'>
    readonly produitId: FieldRef<"VueProduit", 'Int'>
    readonly utilisateurId: FieldRef<"VueProduit", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * VueProduit findUnique
   */
  export type VueProduitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VueProduit
     */
    select?: VueProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VueProduitInclude<ExtArgs> | null
    /**
     * Filter, which VueProduit to fetch.
     */
    where: VueProduitWhereUniqueInput
  }

  /**
   * VueProduit findUniqueOrThrow
   */
  export type VueProduitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VueProduit
     */
    select?: VueProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VueProduitInclude<ExtArgs> | null
    /**
     * Filter, which VueProduit to fetch.
     */
    where: VueProduitWhereUniqueInput
  }

  /**
   * VueProduit findFirst
   */
  export type VueProduitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VueProduit
     */
    select?: VueProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VueProduitInclude<ExtArgs> | null
    /**
     * Filter, which VueProduit to fetch.
     */
    where?: VueProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VueProduits to fetch.
     */
    orderBy?: VueProduitOrderByWithRelationInput | VueProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VueProduits.
     */
    cursor?: VueProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VueProduits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VueProduits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VueProduits.
     */
    distinct?: VueProduitScalarFieldEnum | VueProduitScalarFieldEnum[]
  }

  /**
   * VueProduit findFirstOrThrow
   */
  export type VueProduitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VueProduit
     */
    select?: VueProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VueProduitInclude<ExtArgs> | null
    /**
     * Filter, which VueProduit to fetch.
     */
    where?: VueProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VueProduits to fetch.
     */
    orderBy?: VueProduitOrderByWithRelationInput | VueProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VueProduits.
     */
    cursor?: VueProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VueProduits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VueProduits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VueProduits.
     */
    distinct?: VueProduitScalarFieldEnum | VueProduitScalarFieldEnum[]
  }

  /**
   * VueProduit findMany
   */
  export type VueProduitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VueProduit
     */
    select?: VueProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VueProduitInclude<ExtArgs> | null
    /**
     * Filter, which VueProduits to fetch.
     */
    where?: VueProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VueProduits to fetch.
     */
    orderBy?: VueProduitOrderByWithRelationInput | VueProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VueProduits.
     */
    cursor?: VueProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VueProduits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VueProduits.
     */
    skip?: number
    distinct?: VueProduitScalarFieldEnum | VueProduitScalarFieldEnum[]
  }

  /**
   * VueProduit create
   */
  export type VueProduitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VueProduit
     */
    select?: VueProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VueProduitInclude<ExtArgs> | null
    /**
     * The data needed to create a VueProduit.
     */
    data: XOR<VueProduitCreateInput, VueProduitUncheckedCreateInput>
  }

  /**
   * VueProduit createMany
   */
  export type VueProduitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VueProduits.
     */
    data: VueProduitCreateManyInput | VueProduitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VueProduit update
   */
  export type VueProduitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VueProduit
     */
    select?: VueProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VueProduitInclude<ExtArgs> | null
    /**
     * The data needed to update a VueProduit.
     */
    data: XOR<VueProduitUpdateInput, VueProduitUncheckedUpdateInput>
    /**
     * Choose, which VueProduit to update.
     */
    where: VueProduitWhereUniqueInput
  }

  /**
   * VueProduit updateMany
   */
  export type VueProduitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VueProduits.
     */
    data: XOR<VueProduitUpdateManyMutationInput, VueProduitUncheckedUpdateManyInput>
    /**
     * Filter which VueProduits to update
     */
    where?: VueProduitWhereInput
  }

  /**
   * VueProduit upsert
   */
  export type VueProduitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VueProduit
     */
    select?: VueProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VueProduitInclude<ExtArgs> | null
    /**
     * The filter to search for the VueProduit to update in case it exists.
     */
    where: VueProduitWhereUniqueInput
    /**
     * In case the VueProduit found by the `where` argument doesn't exist, create a new VueProduit with this data.
     */
    create: XOR<VueProduitCreateInput, VueProduitUncheckedCreateInput>
    /**
     * In case the VueProduit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VueProduitUpdateInput, VueProduitUncheckedUpdateInput>
  }

  /**
   * VueProduit delete
   */
  export type VueProduitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VueProduit
     */
    select?: VueProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VueProduitInclude<ExtArgs> | null
    /**
     * Filter which VueProduit to delete.
     */
    where: VueProduitWhereUniqueInput
  }

  /**
   * VueProduit deleteMany
   */
  export type VueProduitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VueProduits to delete
     */
    where?: VueProduitWhereInput
  }

  /**
   * VueProduit.utilisateur
   */
  export type VueProduit$utilisateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    where?: UtilisateurWhereInput
  }

  /**
   * VueProduit without action
   */
  export type VueProduitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VueProduit
     */
    select?: VueProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VueProduitInclude<ExtArgs> | null
  }


  /**
   * Model Paiement
   */

  export type AggregatePaiement = {
    _count: PaiementCountAggregateOutputType | null
    _avg: PaiementAvgAggregateOutputType | null
    _sum: PaiementSumAggregateOutputType | null
    _min: PaiementMinAggregateOutputType | null
    _max: PaiementMaxAggregateOutputType | null
  }

  export type PaiementAvgAggregateOutputType = {
    id: number | null
    montant: number | null
    utilisateurId: number | null
    produitId: number | null
  }

  export type PaiementSumAggregateOutputType = {
    id: number | null
    montant: number | null
    utilisateurId: number | null
    produitId: number | null
  }

  export type PaiementMinAggregateOutputType = {
    id: number | null
    reference: string | null
    montant: number | null
    prestataire: $Enums.PrestatairePaiement | null
    statut: $Enums.StatutPaiement | null
    dateExpiration: Date | null
    dateCreation: Date | null
    dateModification: Date | null
    utilisateurId: number | null
    produitId: number | null
  }

  export type PaiementMaxAggregateOutputType = {
    id: number | null
    reference: string | null
    montant: number | null
    prestataire: $Enums.PrestatairePaiement | null
    statut: $Enums.StatutPaiement | null
    dateExpiration: Date | null
    dateCreation: Date | null
    dateModification: Date | null
    utilisateurId: number | null
    produitId: number | null
  }

  export type PaiementCountAggregateOutputType = {
    id: number
    reference: number
    montant: number
    prestataire: number
    statut: number
    dateExpiration: number
    dateCreation: number
    dateModification: number
    metadata: number
    utilisateurId: number
    produitId: number
    _all: number
  }


  export type PaiementAvgAggregateInputType = {
    id?: true
    montant?: true
    utilisateurId?: true
    produitId?: true
  }

  export type PaiementSumAggregateInputType = {
    id?: true
    montant?: true
    utilisateurId?: true
    produitId?: true
  }

  export type PaiementMinAggregateInputType = {
    id?: true
    reference?: true
    montant?: true
    prestataire?: true
    statut?: true
    dateExpiration?: true
    dateCreation?: true
    dateModification?: true
    utilisateurId?: true
    produitId?: true
  }

  export type PaiementMaxAggregateInputType = {
    id?: true
    reference?: true
    montant?: true
    prestataire?: true
    statut?: true
    dateExpiration?: true
    dateCreation?: true
    dateModification?: true
    utilisateurId?: true
    produitId?: true
  }

  export type PaiementCountAggregateInputType = {
    id?: true
    reference?: true
    montant?: true
    prestataire?: true
    statut?: true
    dateExpiration?: true
    dateCreation?: true
    dateModification?: true
    metadata?: true
    utilisateurId?: true
    produitId?: true
    _all?: true
  }

  export type PaiementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paiement to aggregate.
     */
    where?: PaiementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paiements to fetch.
     */
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaiementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paiements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paiements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Paiements
    **/
    _count?: true | PaiementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaiementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaiementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaiementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaiementMaxAggregateInputType
  }

  export type GetPaiementAggregateType<T extends PaiementAggregateArgs> = {
        [P in keyof T & keyof AggregatePaiement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaiement[P]>
      : GetScalarType<T[P], AggregatePaiement[P]>
  }




  export type PaiementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaiementWhereInput
    orderBy?: PaiementOrderByWithAggregationInput | PaiementOrderByWithAggregationInput[]
    by: PaiementScalarFieldEnum[] | PaiementScalarFieldEnum
    having?: PaiementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaiementCountAggregateInputType | true
    _avg?: PaiementAvgAggregateInputType
    _sum?: PaiementSumAggregateInputType
    _min?: PaiementMinAggregateInputType
    _max?: PaiementMaxAggregateInputType
  }

  export type PaiementGroupByOutputType = {
    id: number
    reference: string
    montant: number
    prestataire: $Enums.PrestatairePaiement
    statut: $Enums.StatutPaiement
    dateExpiration: Date
    dateCreation: Date
    dateModification: Date
    metadata: JsonValue | null
    utilisateurId: number
    produitId: number
    _count: PaiementCountAggregateOutputType | null
    _avg: PaiementAvgAggregateOutputType | null
    _sum: PaiementSumAggregateOutputType | null
    _min: PaiementMinAggregateOutputType | null
    _max: PaiementMaxAggregateOutputType | null
  }

  type GetPaiementGroupByPayload<T extends PaiementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaiementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaiementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaiementGroupByOutputType[P]>
            : GetScalarType<T[P], PaiementGroupByOutputType[P]>
        }
      >
    >


  export type PaiementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reference?: boolean
    montant?: boolean
    prestataire?: boolean
    statut?: boolean
    dateExpiration?: boolean
    dateCreation?: boolean
    dateModification?: boolean
    metadata?: boolean
    utilisateurId?: boolean
    produitId?: boolean
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
    transactions?: boolean | Paiement$transactionsArgs<ExtArgs>
    _count?: boolean | PaiementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paiement"]>


  export type PaiementSelectScalar = {
    id?: boolean
    reference?: boolean
    montant?: boolean
    prestataire?: boolean
    statut?: boolean
    dateExpiration?: boolean
    dateCreation?: boolean
    dateModification?: boolean
    metadata?: boolean
    utilisateurId?: boolean
    produitId?: boolean
  }

  export type PaiementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
    transactions?: boolean | Paiement$transactionsArgs<ExtArgs>
    _count?: boolean | PaiementCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PaiementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Paiement"
    objects: {
      utilisateur: Prisma.$UtilisateurPayload<ExtArgs>
      produit: Prisma.$ProduitPayload<ExtArgs>
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reference: string
      montant: number
      prestataire: $Enums.PrestatairePaiement
      statut: $Enums.StatutPaiement
      dateExpiration: Date
      dateCreation: Date
      dateModification: Date
      metadata: Prisma.JsonValue | null
      utilisateurId: number
      produitId: number
    }, ExtArgs["result"]["paiement"]>
    composites: {}
  }

  type PaiementGetPayload<S extends boolean | null | undefined | PaiementDefaultArgs> = $Result.GetResult<Prisma.$PaiementPayload, S>

  type PaiementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaiementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaiementCountAggregateInputType | true
    }

  export interface PaiementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Paiement'], meta: { name: 'Paiement' } }
    /**
     * Find zero or one Paiement that matches the filter.
     * @param {PaiementFindUniqueArgs} args - Arguments to find a Paiement
     * @example
     * // Get one Paiement
     * const paiement = await prisma.paiement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaiementFindUniqueArgs>(args: SelectSubset<T, PaiementFindUniqueArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Paiement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaiementFindUniqueOrThrowArgs} args - Arguments to find a Paiement
     * @example
     * // Get one Paiement
     * const paiement = await prisma.paiement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaiementFindUniqueOrThrowArgs>(args: SelectSubset<T, PaiementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Paiement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementFindFirstArgs} args - Arguments to find a Paiement
     * @example
     * // Get one Paiement
     * const paiement = await prisma.paiement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaiementFindFirstArgs>(args?: SelectSubset<T, PaiementFindFirstArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Paiement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementFindFirstOrThrowArgs} args - Arguments to find a Paiement
     * @example
     * // Get one Paiement
     * const paiement = await prisma.paiement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaiementFindFirstOrThrowArgs>(args?: SelectSubset<T, PaiementFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Paiements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Paiements
     * const paiements = await prisma.paiement.findMany()
     * 
     * // Get first 10 Paiements
     * const paiements = await prisma.paiement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paiementWithIdOnly = await prisma.paiement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaiementFindManyArgs>(args?: SelectSubset<T, PaiementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Paiement.
     * @param {PaiementCreateArgs} args - Arguments to create a Paiement.
     * @example
     * // Create one Paiement
     * const Paiement = await prisma.paiement.create({
     *   data: {
     *     // ... data to create a Paiement
     *   }
     * })
     * 
     */
    create<T extends PaiementCreateArgs>(args: SelectSubset<T, PaiementCreateArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Paiements.
     * @param {PaiementCreateManyArgs} args - Arguments to create many Paiements.
     * @example
     * // Create many Paiements
     * const paiement = await prisma.paiement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaiementCreateManyArgs>(args?: SelectSubset<T, PaiementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Paiement.
     * @param {PaiementDeleteArgs} args - Arguments to delete one Paiement.
     * @example
     * // Delete one Paiement
     * const Paiement = await prisma.paiement.delete({
     *   where: {
     *     // ... filter to delete one Paiement
     *   }
     * })
     * 
     */
    delete<T extends PaiementDeleteArgs>(args: SelectSubset<T, PaiementDeleteArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Paiement.
     * @param {PaiementUpdateArgs} args - Arguments to update one Paiement.
     * @example
     * // Update one Paiement
     * const paiement = await prisma.paiement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaiementUpdateArgs>(args: SelectSubset<T, PaiementUpdateArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Paiements.
     * @param {PaiementDeleteManyArgs} args - Arguments to filter Paiements to delete.
     * @example
     * // Delete a few Paiements
     * const { count } = await prisma.paiement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaiementDeleteManyArgs>(args?: SelectSubset<T, PaiementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Paiements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Paiements
     * const paiement = await prisma.paiement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaiementUpdateManyArgs>(args: SelectSubset<T, PaiementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Paiement.
     * @param {PaiementUpsertArgs} args - Arguments to update or create a Paiement.
     * @example
     * // Update or create a Paiement
     * const paiement = await prisma.paiement.upsert({
     *   create: {
     *     // ... data to create a Paiement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paiement we want to update
     *   }
     * })
     */
    upsert<T extends PaiementUpsertArgs>(args: SelectSubset<T, PaiementUpsertArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Paiements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementCountArgs} args - Arguments to filter Paiements to count.
     * @example
     * // Count the number of Paiements
     * const count = await prisma.paiement.count({
     *   where: {
     *     // ... the filter for the Paiements we want to count
     *   }
     * })
    **/
    count<T extends PaiementCountArgs>(
      args?: Subset<T, PaiementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaiementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paiement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaiementAggregateArgs>(args: Subset<T, PaiementAggregateArgs>): Prisma.PrismaPromise<GetPaiementAggregateType<T>>

    /**
     * Group by Paiement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaiementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaiementGroupByArgs['orderBy'] }
        : { orderBy?: PaiementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaiementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaiementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Paiement model
   */
  readonly fields: PaiementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Paiement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaiementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    utilisateur<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    produit<T extends ProduitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProduitDefaultArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    transactions<T extends Paiement$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Paiement$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Paiement model
   */ 
  interface PaiementFieldRefs {
    readonly id: FieldRef<"Paiement", 'Int'>
    readonly reference: FieldRef<"Paiement", 'String'>
    readonly montant: FieldRef<"Paiement", 'Float'>
    readonly prestataire: FieldRef<"Paiement", 'PrestatairePaiement'>
    readonly statut: FieldRef<"Paiement", 'StatutPaiement'>
    readonly dateExpiration: FieldRef<"Paiement", 'DateTime'>
    readonly dateCreation: FieldRef<"Paiement", 'DateTime'>
    readonly dateModification: FieldRef<"Paiement", 'DateTime'>
    readonly metadata: FieldRef<"Paiement", 'Json'>
    readonly utilisateurId: FieldRef<"Paiement", 'Int'>
    readonly produitId: FieldRef<"Paiement", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Paiement findUnique
   */
  export type PaiementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter, which Paiement to fetch.
     */
    where: PaiementWhereUniqueInput
  }

  /**
   * Paiement findUniqueOrThrow
   */
  export type PaiementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter, which Paiement to fetch.
     */
    where: PaiementWhereUniqueInput
  }

  /**
   * Paiement findFirst
   */
  export type PaiementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter, which Paiement to fetch.
     */
    where?: PaiementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paiements to fetch.
     */
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paiements.
     */
    cursor?: PaiementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paiements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paiements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paiements.
     */
    distinct?: PaiementScalarFieldEnum | PaiementScalarFieldEnum[]
  }

  /**
   * Paiement findFirstOrThrow
   */
  export type PaiementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter, which Paiement to fetch.
     */
    where?: PaiementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paiements to fetch.
     */
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paiements.
     */
    cursor?: PaiementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paiements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paiements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paiements.
     */
    distinct?: PaiementScalarFieldEnum | PaiementScalarFieldEnum[]
  }

  /**
   * Paiement findMany
   */
  export type PaiementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter, which Paiements to fetch.
     */
    where?: PaiementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paiements to fetch.
     */
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Paiements.
     */
    cursor?: PaiementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paiements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paiements.
     */
    skip?: number
    distinct?: PaiementScalarFieldEnum | PaiementScalarFieldEnum[]
  }

  /**
   * Paiement create
   */
  export type PaiementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * The data needed to create a Paiement.
     */
    data: XOR<PaiementCreateInput, PaiementUncheckedCreateInput>
  }

  /**
   * Paiement createMany
   */
  export type PaiementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Paiements.
     */
    data: PaiementCreateManyInput | PaiementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Paiement update
   */
  export type PaiementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * The data needed to update a Paiement.
     */
    data: XOR<PaiementUpdateInput, PaiementUncheckedUpdateInput>
    /**
     * Choose, which Paiement to update.
     */
    where: PaiementWhereUniqueInput
  }

  /**
   * Paiement updateMany
   */
  export type PaiementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Paiements.
     */
    data: XOR<PaiementUpdateManyMutationInput, PaiementUncheckedUpdateManyInput>
    /**
     * Filter which Paiements to update
     */
    where?: PaiementWhereInput
  }

  /**
   * Paiement upsert
   */
  export type PaiementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * The filter to search for the Paiement to update in case it exists.
     */
    where: PaiementWhereUniqueInput
    /**
     * In case the Paiement found by the `where` argument doesn't exist, create a new Paiement with this data.
     */
    create: XOR<PaiementCreateInput, PaiementUncheckedCreateInput>
    /**
     * In case the Paiement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaiementUpdateInput, PaiementUncheckedUpdateInput>
  }

  /**
   * Paiement delete
   */
  export type PaiementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter which Paiement to delete.
     */
    where: PaiementWhereUniqueInput
  }

  /**
   * Paiement deleteMany
   */
  export type PaiementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paiements to delete
     */
    where?: PaiementWhereInput
  }

  /**
   * Paiement.transactions
   */
  export type Paiement$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Paiement without action
   */
  export type PaiementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    id: number | null
    montant: number | null
    paiementId: number | null
  }

  export type TransactionSumAggregateOutputType = {
    id: number | null
    montant: number | null
    paiementId: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: number | null
    type: $Enums.TypeTransaction | null
    montant: number | null
    statut: $Enums.StatutTransaction | null
    referenceExterne: string | null
    dateCreation: Date | null
    dateModification: Date | null
    paiementId: number | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: number | null
    type: $Enums.TypeTransaction | null
    montant: number | null
    statut: $Enums.StatutTransaction | null
    referenceExterne: string | null
    dateCreation: Date | null
    dateModification: Date | null
    paiementId: number | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    type: number
    montant: number
    statut: number
    referenceExterne: number
    dateCreation: number
    dateModification: number
    details: number
    paiementId: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    id?: true
    montant?: true
    paiementId?: true
  }

  export type TransactionSumAggregateInputType = {
    id?: true
    montant?: true
    paiementId?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    type?: true
    montant?: true
    statut?: true
    referenceExterne?: true
    dateCreation?: true
    dateModification?: true
    paiementId?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    type?: true
    montant?: true
    statut?: true
    referenceExterne?: true
    dateCreation?: true
    dateModification?: true
    paiementId?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    type?: true
    montant?: true
    statut?: true
    referenceExterne?: true
    dateCreation?: true
    dateModification?: true
    details?: true
    paiementId?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: number
    type: $Enums.TypeTransaction
    montant: number
    statut: $Enums.StatutTransaction
    referenceExterne: string | null
    dateCreation: Date
    dateModification: Date
    details: JsonValue | null
    paiementId: number
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    montant?: boolean
    statut?: boolean
    referenceExterne?: boolean
    dateCreation?: boolean
    dateModification?: boolean
    details?: boolean
    paiementId?: boolean
    paiement?: boolean | PaiementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>


  export type TransactionSelectScalar = {
    id?: boolean
    type?: boolean
    montant?: boolean
    statut?: boolean
    referenceExterne?: boolean
    dateCreation?: boolean
    dateModification?: boolean
    details?: boolean
    paiementId?: boolean
  }

  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paiement?: boolean | PaiementDefaultArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      paiement: Prisma.$PaiementPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: $Enums.TypeTransaction
      montant: number
      statut: $Enums.StatutTransaction
      referenceExterne: string | null
      dateCreation: Date
      dateModification: Date
      details: Prisma.JsonValue | null
      paiementId: number
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    paiement<T extends PaiementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaiementDefaultArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */ 
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'Int'>
    readonly type: FieldRef<"Transaction", 'TypeTransaction'>
    readonly montant: FieldRef<"Transaction", 'Float'>
    readonly statut: FieldRef<"Transaction", 'StatutTransaction'>
    readonly referenceExterne: FieldRef<"Transaction", 'String'>
    readonly dateCreation: FieldRef<"Transaction", 'DateTime'>
    readonly dateModification: FieldRef<"Transaction", 'DateTime'>
    readonly details: FieldRef<"Transaction", 'Json'>
    readonly paiementId: FieldRef<"Transaction", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UtilisateurScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prenom: 'prenom',
    email: 'email',
    telephone: 'telephone',
    motDePasse: 'motDePasse',
    role: 'role',
    estActif: 'estActif',
    dateCreation: 'dateCreation',
    dateModification: 'dateModification'
  };

  export type UtilisateurScalarFieldEnum = (typeof UtilisateurScalarFieldEnum)[keyof typeof UtilisateurScalarFieldEnum]


  export const ProduitScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    description: 'description',
    prix: 'prix',
    estVip: 'estVip',
    imageUrl: 'imageUrl',
    imagePublicId: 'imagePublicId',
    vues: 'vues',
    statut: 'statut',
    localisation: 'localisation',
    categorie: 'categorie',
    dateCreation: 'dateCreation',
    dateModification: 'dateModification',
    dateExpiration: 'dateExpiration',
    utilisateurId: 'utilisateurId'
  };

  export type ProduitScalarFieldEnum = (typeof ProduitScalarFieldEnum)[keyof typeof ProduitScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    message: 'message',
    type: 'type',
    estLue: 'estLue',
    dateCreation: 'dateCreation',
    utilisateurId: 'utilisateurId'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const VueProduitScalarFieldEnum: {
    id: 'id',
    dateVue: 'dateVue',
    adresseIp: 'adresseIp',
    produitId: 'produitId',
    utilisateurId: 'utilisateurId'
  };

  export type VueProduitScalarFieldEnum = (typeof VueProduitScalarFieldEnum)[keyof typeof VueProduitScalarFieldEnum]


  export const PaiementScalarFieldEnum: {
    id: 'id',
    reference: 'reference',
    montant: 'montant',
    prestataire: 'prestataire',
    statut: 'statut',
    dateExpiration: 'dateExpiration',
    dateCreation: 'dateCreation',
    dateModification: 'dateModification',
    metadata: 'metadata',
    utilisateurId: 'utilisateurId',
    produitId: 'produitId'
  };

  export type PaiementScalarFieldEnum = (typeof PaiementScalarFieldEnum)[keyof typeof PaiementScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    type: 'type',
    montant: 'montant',
    statut: 'statut',
    referenceExterne: 'referenceExterne',
    dateCreation: 'dateCreation',
    dateModification: 'dateModification',
    details: 'details',
    paiementId: 'paiementId'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'RoleUtilisateur'
   */
  export type EnumRoleUtilisateurFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleUtilisateur'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'StatutProduit'
   */
  export type EnumStatutProduitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutProduit'>
    


  /**
   * Reference to a field of type 'TypeNotification'
   */
  export type EnumTypeNotificationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TypeNotification'>
    


  /**
   * Reference to a field of type 'PrestatairePaiement'
   */
  export type EnumPrestatairePaiementFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PrestatairePaiement'>
    


  /**
   * Reference to a field of type 'StatutPaiement'
   */
  export type EnumStatutPaiementFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutPaiement'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'TypeTransaction'
   */
  export type EnumTypeTransactionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TypeTransaction'>
    


  /**
   * Reference to a field of type 'StatutTransaction'
   */
  export type EnumStatutTransactionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutTransaction'>
    
  /**
   * Deep Input Types
   */


  export type UtilisateurWhereInput = {
    AND?: UtilisateurWhereInput | UtilisateurWhereInput[]
    OR?: UtilisateurWhereInput[]
    NOT?: UtilisateurWhereInput | UtilisateurWhereInput[]
    id?: IntFilter<"Utilisateur"> | number
    nom?: StringFilter<"Utilisateur"> | string
    prenom?: StringNullableFilter<"Utilisateur"> | string | null
    email?: StringFilter<"Utilisateur"> | string
    telephone?: StringNullableFilter<"Utilisateur"> | string | null
    motDePasse?: StringFilter<"Utilisateur"> | string
    role?: EnumRoleUtilisateurFilter<"Utilisateur"> | $Enums.RoleUtilisateur
    estActif?: BoolFilter<"Utilisateur"> | boolean
    dateCreation?: DateTimeFilter<"Utilisateur"> | Date | string
    dateModification?: DateTimeFilter<"Utilisateur"> | Date | string
    produits?: ProduitListRelationFilter
    notifications?: NotificationListRelationFilter
    vuesProduites?: VueProduitListRelationFilter
    paiements?: PaiementListRelationFilter
  }

  export type UtilisateurOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrderInput | SortOrder
    email?: SortOrder
    telephone?: SortOrderInput | SortOrder
    motDePasse?: SortOrder
    role?: SortOrder
    estActif?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    produits?: ProduitOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    vuesProduites?: VueProduitOrderByRelationAggregateInput
    paiements?: PaiementOrderByRelationAggregateInput
  }

  export type UtilisateurWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UtilisateurWhereInput | UtilisateurWhereInput[]
    OR?: UtilisateurWhereInput[]
    NOT?: UtilisateurWhereInput | UtilisateurWhereInput[]
    nom?: StringFilter<"Utilisateur"> | string
    prenom?: StringNullableFilter<"Utilisateur"> | string | null
    telephone?: StringNullableFilter<"Utilisateur"> | string | null
    motDePasse?: StringFilter<"Utilisateur"> | string
    role?: EnumRoleUtilisateurFilter<"Utilisateur"> | $Enums.RoleUtilisateur
    estActif?: BoolFilter<"Utilisateur"> | boolean
    dateCreation?: DateTimeFilter<"Utilisateur"> | Date | string
    dateModification?: DateTimeFilter<"Utilisateur"> | Date | string
    produits?: ProduitListRelationFilter
    notifications?: NotificationListRelationFilter
    vuesProduites?: VueProduitListRelationFilter
    paiements?: PaiementListRelationFilter
  }, "id" | "email">

  export type UtilisateurOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrderInput | SortOrder
    email?: SortOrder
    telephone?: SortOrderInput | SortOrder
    motDePasse?: SortOrder
    role?: SortOrder
    estActif?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    _count?: UtilisateurCountOrderByAggregateInput
    _avg?: UtilisateurAvgOrderByAggregateInput
    _max?: UtilisateurMaxOrderByAggregateInput
    _min?: UtilisateurMinOrderByAggregateInput
    _sum?: UtilisateurSumOrderByAggregateInput
  }

  export type UtilisateurScalarWhereWithAggregatesInput = {
    AND?: UtilisateurScalarWhereWithAggregatesInput | UtilisateurScalarWhereWithAggregatesInput[]
    OR?: UtilisateurScalarWhereWithAggregatesInput[]
    NOT?: UtilisateurScalarWhereWithAggregatesInput | UtilisateurScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Utilisateur"> | number
    nom?: StringWithAggregatesFilter<"Utilisateur"> | string
    prenom?: StringNullableWithAggregatesFilter<"Utilisateur"> | string | null
    email?: StringWithAggregatesFilter<"Utilisateur"> | string
    telephone?: StringNullableWithAggregatesFilter<"Utilisateur"> | string | null
    motDePasse?: StringWithAggregatesFilter<"Utilisateur"> | string
    role?: EnumRoleUtilisateurWithAggregatesFilter<"Utilisateur"> | $Enums.RoleUtilisateur
    estActif?: BoolWithAggregatesFilter<"Utilisateur"> | boolean
    dateCreation?: DateTimeWithAggregatesFilter<"Utilisateur"> | Date | string
    dateModification?: DateTimeWithAggregatesFilter<"Utilisateur"> | Date | string
  }

  export type ProduitWhereInput = {
    AND?: ProduitWhereInput | ProduitWhereInput[]
    OR?: ProduitWhereInput[]
    NOT?: ProduitWhereInput | ProduitWhereInput[]
    id?: IntFilter<"Produit"> | number
    titre?: StringFilter<"Produit"> | string
    description?: StringFilter<"Produit"> | string
    prix?: FloatFilter<"Produit"> | number
    estVip?: BoolFilter<"Produit"> | boolean
    imageUrl?: StringFilter<"Produit"> | string
    imagePublicId?: StringNullableFilter<"Produit"> | string | null
    vues?: IntFilter<"Produit"> | number
    statut?: EnumStatutProduitFilter<"Produit"> | $Enums.StatutProduit
    localisation?: StringNullableFilter<"Produit"> | string | null
    categorie?: StringNullableFilter<"Produit"> | string | null
    dateCreation?: DateTimeFilter<"Produit"> | Date | string
    dateModification?: DateTimeFilter<"Produit"> | Date | string
    dateExpiration?: DateTimeFilter<"Produit"> | Date | string
    utilisateurId?: IntFilter<"Produit"> | number
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    vuesProduites?: VueProduitListRelationFilter
    paiements?: PaiementListRelationFilter
  }

  export type ProduitOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    prix?: SortOrder
    estVip?: SortOrder
    imageUrl?: SortOrder
    imagePublicId?: SortOrderInput | SortOrder
    vues?: SortOrder
    statut?: SortOrder
    localisation?: SortOrderInput | SortOrder
    categorie?: SortOrderInput | SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    dateExpiration?: SortOrder
    utilisateurId?: SortOrder
    utilisateur?: UtilisateurOrderByWithRelationInput
    vuesProduites?: VueProduitOrderByRelationAggregateInput
    paiements?: PaiementOrderByRelationAggregateInput
  }

  export type ProduitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProduitWhereInput | ProduitWhereInput[]
    OR?: ProduitWhereInput[]
    NOT?: ProduitWhereInput | ProduitWhereInput[]
    titre?: StringFilter<"Produit"> | string
    description?: StringFilter<"Produit"> | string
    prix?: FloatFilter<"Produit"> | number
    estVip?: BoolFilter<"Produit"> | boolean
    imageUrl?: StringFilter<"Produit"> | string
    imagePublicId?: StringNullableFilter<"Produit"> | string | null
    vues?: IntFilter<"Produit"> | number
    statut?: EnumStatutProduitFilter<"Produit"> | $Enums.StatutProduit
    localisation?: StringNullableFilter<"Produit"> | string | null
    categorie?: StringNullableFilter<"Produit"> | string | null
    dateCreation?: DateTimeFilter<"Produit"> | Date | string
    dateModification?: DateTimeFilter<"Produit"> | Date | string
    dateExpiration?: DateTimeFilter<"Produit"> | Date | string
    utilisateurId?: IntFilter<"Produit"> | number
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    vuesProduites?: VueProduitListRelationFilter
    paiements?: PaiementListRelationFilter
  }, "id">

  export type ProduitOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    prix?: SortOrder
    estVip?: SortOrder
    imageUrl?: SortOrder
    imagePublicId?: SortOrderInput | SortOrder
    vues?: SortOrder
    statut?: SortOrder
    localisation?: SortOrderInput | SortOrder
    categorie?: SortOrderInput | SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    dateExpiration?: SortOrder
    utilisateurId?: SortOrder
    _count?: ProduitCountOrderByAggregateInput
    _avg?: ProduitAvgOrderByAggregateInput
    _max?: ProduitMaxOrderByAggregateInput
    _min?: ProduitMinOrderByAggregateInput
    _sum?: ProduitSumOrderByAggregateInput
  }

  export type ProduitScalarWhereWithAggregatesInput = {
    AND?: ProduitScalarWhereWithAggregatesInput | ProduitScalarWhereWithAggregatesInput[]
    OR?: ProduitScalarWhereWithAggregatesInput[]
    NOT?: ProduitScalarWhereWithAggregatesInput | ProduitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Produit"> | number
    titre?: StringWithAggregatesFilter<"Produit"> | string
    description?: StringWithAggregatesFilter<"Produit"> | string
    prix?: FloatWithAggregatesFilter<"Produit"> | number
    estVip?: BoolWithAggregatesFilter<"Produit"> | boolean
    imageUrl?: StringWithAggregatesFilter<"Produit"> | string
    imagePublicId?: StringNullableWithAggregatesFilter<"Produit"> | string | null
    vues?: IntWithAggregatesFilter<"Produit"> | number
    statut?: EnumStatutProduitWithAggregatesFilter<"Produit"> | $Enums.StatutProduit
    localisation?: StringNullableWithAggregatesFilter<"Produit"> | string | null
    categorie?: StringNullableWithAggregatesFilter<"Produit"> | string | null
    dateCreation?: DateTimeWithAggregatesFilter<"Produit"> | Date | string
    dateModification?: DateTimeWithAggregatesFilter<"Produit"> | Date | string
    dateExpiration?: DateTimeWithAggregatesFilter<"Produit"> | Date | string
    utilisateurId?: IntWithAggregatesFilter<"Produit"> | number
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    titre?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumTypeNotificationFilter<"Notification"> | $Enums.TypeNotification
    estLue?: BoolFilter<"Notification"> | boolean
    dateCreation?: DateTimeFilter<"Notification"> | Date | string
    utilisateurId?: IntFilter<"Notification"> | number
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    message?: SortOrder
    type?: SortOrder
    estLue?: SortOrder
    dateCreation?: SortOrder
    utilisateurId?: SortOrder
    utilisateur?: UtilisateurOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    titre?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumTypeNotificationFilter<"Notification"> | $Enums.TypeNotification
    estLue?: BoolFilter<"Notification"> | boolean
    dateCreation?: DateTimeFilter<"Notification"> | Date | string
    utilisateurId?: IntFilter<"Notification"> | number
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    message?: SortOrder
    type?: SortOrder
    estLue?: SortOrder
    dateCreation?: SortOrder
    utilisateurId?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    titre?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumTypeNotificationWithAggregatesFilter<"Notification"> | $Enums.TypeNotification
    estLue?: BoolWithAggregatesFilter<"Notification"> | boolean
    dateCreation?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    utilisateurId?: IntWithAggregatesFilter<"Notification"> | number
  }

  export type VueProduitWhereInput = {
    AND?: VueProduitWhereInput | VueProduitWhereInput[]
    OR?: VueProduitWhereInput[]
    NOT?: VueProduitWhereInput | VueProduitWhereInput[]
    id?: IntFilter<"VueProduit"> | number
    dateVue?: DateTimeFilter<"VueProduit"> | Date | string
    adresseIp?: StringNullableFilter<"VueProduit"> | string | null
    produitId?: IntFilter<"VueProduit"> | number
    utilisateurId?: IntNullableFilter<"VueProduit"> | number | null
    produit?: XOR<ProduitRelationFilter, ProduitWhereInput>
    utilisateur?: XOR<UtilisateurNullableRelationFilter, UtilisateurWhereInput> | null
  }

  export type VueProduitOrderByWithRelationInput = {
    id?: SortOrder
    dateVue?: SortOrder
    adresseIp?: SortOrderInput | SortOrder
    produitId?: SortOrder
    utilisateurId?: SortOrderInput | SortOrder
    produit?: ProduitOrderByWithRelationInput
    utilisateur?: UtilisateurOrderByWithRelationInput
  }

  export type VueProduitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    produitId_utilisateurId_adresseIp?: VueProduitProduitIdUtilisateurIdAdresseIpCompoundUniqueInput
    AND?: VueProduitWhereInput | VueProduitWhereInput[]
    OR?: VueProduitWhereInput[]
    NOT?: VueProduitWhereInput | VueProduitWhereInput[]
    dateVue?: DateTimeFilter<"VueProduit"> | Date | string
    adresseIp?: StringNullableFilter<"VueProduit"> | string | null
    produitId?: IntFilter<"VueProduit"> | number
    utilisateurId?: IntNullableFilter<"VueProduit"> | number | null
    produit?: XOR<ProduitRelationFilter, ProduitWhereInput>
    utilisateur?: XOR<UtilisateurNullableRelationFilter, UtilisateurWhereInput> | null
  }, "id" | "produitId_utilisateurId_adresseIp">

  export type VueProduitOrderByWithAggregationInput = {
    id?: SortOrder
    dateVue?: SortOrder
    adresseIp?: SortOrderInput | SortOrder
    produitId?: SortOrder
    utilisateurId?: SortOrderInput | SortOrder
    _count?: VueProduitCountOrderByAggregateInput
    _avg?: VueProduitAvgOrderByAggregateInput
    _max?: VueProduitMaxOrderByAggregateInput
    _min?: VueProduitMinOrderByAggregateInput
    _sum?: VueProduitSumOrderByAggregateInput
  }

  export type VueProduitScalarWhereWithAggregatesInput = {
    AND?: VueProduitScalarWhereWithAggregatesInput | VueProduitScalarWhereWithAggregatesInput[]
    OR?: VueProduitScalarWhereWithAggregatesInput[]
    NOT?: VueProduitScalarWhereWithAggregatesInput | VueProduitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"VueProduit"> | number
    dateVue?: DateTimeWithAggregatesFilter<"VueProduit"> | Date | string
    adresseIp?: StringNullableWithAggregatesFilter<"VueProduit"> | string | null
    produitId?: IntWithAggregatesFilter<"VueProduit"> | number
    utilisateurId?: IntNullableWithAggregatesFilter<"VueProduit"> | number | null
  }

  export type PaiementWhereInput = {
    AND?: PaiementWhereInput | PaiementWhereInput[]
    OR?: PaiementWhereInput[]
    NOT?: PaiementWhereInput | PaiementWhereInput[]
    id?: IntFilter<"Paiement"> | number
    reference?: StringFilter<"Paiement"> | string
    montant?: FloatFilter<"Paiement"> | number
    prestataire?: EnumPrestatairePaiementFilter<"Paiement"> | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementFilter<"Paiement"> | $Enums.StatutPaiement
    dateExpiration?: DateTimeFilter<"Paiement"> | Date | string
    dateCreation?: DateTimeFilter<"Paiement"> | Date | string
    dateModification?: DateTimeFilter<"Paiement"> | Date | string
    metadata?: JsonNullableFilter<"Paiement">
    utilisateurId?: IntFilter<"Paiement"> | number
    produitId?: IntFilter<"Paiement"> | number
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    produit?: XOR<ProduitRelationFilter, ProduitWhereInput>
    transactions?: TransactionListRelationFilter
  }

  export type PaiementOrderByWithRelationInput = {
    id?: SortOrder
    reference?: SortOrder
    montant?: SortOrder
    prestataire?: SortOrder
    statut?: SortOrder
    dateExpiration?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    metadata?: SortOrderInput | SortOrder
    utilisateurId?: SortOrder
    produitId?: SortOrder
    utilisateur?: UtilisateurOrderByWithRelationInput
    produit?: ProduitOrderByWithRelationInput
    transactions?: TransactionOrderByRelationAggregateInput
  }

  export type PaiementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    reference?: string
    AND?: PaiementWhereInput | PaiementWhereInput[]
    OR?: PaiementWhereInput[]
    NOT?: PaiementWhereInput | PaiementWhereInput[]
    montant?: FloatFilter<"Paiement"> | number
    prestataire?: EnumPrestatairePaiementFilter<"Paiement"> | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementFilter<"Paiement"> | $Enums.StatutPaiement
    dateExpiration?: DateTimeFilter<"Paiement"> | Date | string
    dateCreation?: DateTimeFilter<"Paiement"> | Date | string
    dateModification?: DateTimeFilter<"Paiement"> | Date | string
    metadata?: JsonNullableFilter<"Paiement">
    utilisateurId?: IntFilter<"Paiement"> | number
    produitId?: IntFilter<"Paiement"> | number
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    produit?: XOR<ProduitRelationFilter, ProduitWhereInput>
    transactions?: TransactionListRelationFilter
  }, "id" | "reference">

  export type PaiementOrderByWithAggregationInput = {
    id?: SortOrder
    reference?: SortOrder
    montant?: SortOrder
    prestataire?: SortOrder
    statut?: SortOrder
    dateExpiration?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    metadata?: SortOrderInput | SortOrder
    utilisateurId?: SortOrder
    produitId?: SortOrder
    _count?: PaiementCountOrderByAggregateInput
    _avg?: PaiementAvgOrderByAggregateInput
    _max?: PaiementMaxOrderByAggregateInput
    _min?: PaiementMinOrderByAggregateInput
    _sum?: PaiementSumOrderByAggregateInput
  }

  export type PaiementScalarWhereWithAggregatesInput = {
    AND?: PaiementScalarWhereWithAggregatesInput | PaiementScalarWhereWithAggregatesInput[]
    OR?: PaiementScalarWhereWithAggregatesInput[]
    NOT?: PaiementScalarWhereWithAggregatesInput | PaiementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Paiement"> | number
    reference?: StringWithAggregatesFilter<"Paiement"> | string
    montant?: FloatWithAggregatesFilter<"Paiement"> | number
    prestataire?: EnumPrestatairePaiementWithAggregatesFilter<"Paiement"> | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementWithAggregatesFilter<"Paiement"> | $Enums.StatutPaiement
    dateExpiration?: DateTimeWithAggregatesFilter<"Paiement"> | Date | string
    dateCreation?: DateTimeWithAggregatesFilter<"Paiement"> | Date | string
    dateModification?: DateTimeWithAggregatesFilter<"Paiement"> | Date | string
    metadata?: JsonNullableWithAggregatesFilter<"Paiement">
    utilisateurId?: IntWithAggregatesFilter<"Paiement"> | number
    produitId?: IntWithAggregatesFilter<"Paiement"> | number
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: IntFilter<"Transaction"> | number
    type?: EnumTypeTransactionFilter<"Transaction"> | $Enums.TypeTransaction
    montant?: FloatFilter<"Transaction"> | number
    statut?: EnumStatutTransactionFilter<"Transaction"> | $Enums.StatutTransaction
    referenceExterne?: StringNullableFilter<"Transaction"> | string | null
    dateCreation?: DateTimeFilter<"Transaction"> | Date | string
    dateModification?: DateTimeFilter<"Transaction"> | Date | string
    details?: JsonNullableFilter<"Transaction">
    paiementId?: IntFilter<"Transaction"> | number
    paiement?: XOR<PaiementRelationFilter, PaiementWhereInput>
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    montant?: SortOrder
    statut?: SortOrder
    referenceExterne?: SortOrderInput | SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    details?: SortOrderInput | SortOrder
    paiementId?: SortOrder
    paiement?: PaiementOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    type?: EnumTypeTransactionFilter<"Transaction"> | $Enums.TypeTransaction
    montant?: FloatFilter<"Transaction"> | number
    statut?: EnumStatutTransactionFilter<"Transaction"> | $Enums.StatutTransaction
    referenceExterne?: StringNullableFilter<"Transaction"> | string | null
    dateCreation?: DateTimeFilter<"Transaction"> | Date | string
    dateModification?: DateTimeFilter<"Transaction"> | Date | string
    details?: JsonNullableFilter<"Transaction">
    paiementId?: IntFilter<"Transaction"> | number
    paiement?: XOR<PaiementRelationFilter, PaiementWhereInput>
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    montant?: SortOrder
    statut?: SortOrder
    referenceExterne?: SortOrderInput | SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    details?: SortOrderInput | SortOrder
    paiementId?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Transaction"> | number
    type?: EnumTypeTransactionWithAggregatesFilter<"Transaction"> | $Enums.TypeTransaction
    montant?: FloatWithAggregatesFilter<"Transaction"> | number
    statut?: EnumStatutTransactionWithAggregatesFilter<"Transaction"> | $Enums.StatutTransaction
    referenceExterne?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    dateCreation?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    dateModification?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    details?: JsonNullableWithAggregatesFilter<"Transaction">
    paiementId?: IntWithAggregatesFilter<"Transaction"> | number
  }

  export type UtilisateurCreateInput = {
    nom: string
    prenom?: string | null
    email: string
    telephone?: string | null
    motDePasse: string
    role?: $Enums.RoleUtilisateur
    estActif?: boolean
    dateCreation?: Date | string
    dateModification?: Date | string
    produits?: ProduitCreateNestedManyWithoutUtilisateurInput
    notifications?: NotificationCreateNestedManyWithoutUtilisateurInput
    vuesProduites?: VueProduitCreateNestedManyWithoutUtilisateurInput
    paiements?: PaiementCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateInput = {
    id?: number
    nom: string
    prenom?: string | null
    email: string
    telephone?: string | null
    motDePasse: string
    role?: $Enums.RoleUtilisateur
    estActif?: boolean
    dateCreation?: Date | string
    dateModification?: Date | string
    produits?: ProduitUncheckedCreateNestedManyWithoutUtilisateurInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUtilisateurInput
    vuesProduites?: VueProduitUncheckedCreateNestedManyWithoutUtilisateurInput
    paiements?: PaiementUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
    estActif?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    produits?: ProduitUpdateManyWithoutUtilisateurNestedInput
    notifications?: NotificationUpdateManyWithoutUtilisateurNestedInput
    vuesProduites?: VueProduitUpdateManyWithoutUtilisateurNestedInput
    paiements?: PaiementUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
    estActif?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    produits?: ProduitUncheckedUpdateManyWithoutUtilisateurNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUtilisateurNestedInput
    vuesProduites?: VueProduitUncheckedUpdateManyWithoutUtilisateurNestedInput
    paiements?: PaiementUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurCreateManyInput = {
    id?: number
    nom: string
    prenom?: string | null
    email: string
    telephone?: string | null
    motDePasse: string
    role?: $Enums.RoleUtilisateur
    estActif?: boolean
    dateCreation?: Date | string
    dateModification?: Date | string
  }

  export type UtilisateurUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
    estActif?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UtilisateurUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
    estActif?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProduitCreateInput = {
    titre: string
    description: string
    prix: number
    estVip?: boolean
    imageUrl: string
    imagePublicId?: string | null
    vues?: number
    statut?: $Enums.StatutProduit
    localisation?: string | null
    categorie?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    dateExpiration: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutProduitsInput
    vuesProduites?: VueProduitCreateNestedManyWithoutProduitInput
    paiements?: PaiementCreateNestedManyWithoutProduitInput
  }

  export type ProduitUncheckedCreateInput = {
    id?: number
    titre: string
    description: string
    prix: number
    estVip?: boolean
    imageUrl: string
    imagePublicId?: string | null
    vues?: number
    statut?: $Enums.StatutProduit
    localisation?: string | null
    categorie?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    dateExpiration: Date | string
    utilisateurId: number
    vuesProduites?: VueProduitUncheckedCreateNestedManyWithoutProduitInput
    paiements?: PaiementUncheckedCreateNestedManyWithoutProduitInput
  }

  export type ProduitUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    estVip?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    vues?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutProduitFieldUpdateOperationsInput | $Enums.StatutProduit
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    categorie?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutProduitsNestedInput
    vuesProduites?: VueProduitUpdateManyWithoutProduitNestedInput
    paiements?: PaiementUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    estVip?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    vues?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutProduitFieldUpdateOperationsInput | $Enums.StatutProduit
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    categorie?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    vuesProduites?: VueProduitUncheckedUpdateManyWithoutProduitNestedInput
    paiements?: PaiementUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type ProduitCreateManyInput = {
    id?: number
    titre: string
    description: string
    prix: number
    estVip?: boolean
    imageUrl: string
    imagePublicId?: string | null
    vues?: number
    statut?: $Enums.StatutProduit
    localisation?: string | null
    categorie?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    dateExpiration: Date | string
    utilisateurId: number
  }

  export type ProduitUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    estVip?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    vues?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutProduitFieldUpdateOperationsInput | $Enums.StatutProduit
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    categorie?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProduitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    estVip?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    vues?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutProduitFieldUpdateOperationsInput | $Enums.StatutProduit
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    categorie?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationCreateInput = {
    titre: string
    message: string
    type?: $Enums.TypeNotification
    estLue?: boolean
    dateCreation?: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    titre: string
    message: string
    type?: $Enums.TypeNotification
    estLue?: boolean
    dateCreation?: Date | string
    utilisateurId: number
  }

  export type NotificationUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification
    estLue?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification
    estLue?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationCreateManyInput = {
    id?: number
    titre: string
    message: string
    type?: $Enums.TypeNotification
    estLue?: boolean
    dateCreation?: Date | string
    utilisateurId: number
  }

  export type NotificationUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification
    estLue?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification
    estLue?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
  }

  export type VueProduitCreateInput = {
    dateVue?: Date | string
    adresseIp?: string | null
    produit: ProduitCreateNestedOneWithoutVuesProduitesInput
    utilisateur?: UtilisateurCreateNestedOneWithoutVuesProduitesInput
  }

  export type VueProduitUncheckedCreateInput = {
    id?: number
    dateVue?: Date | string
    adresseIp?: string | null
    produitId: number
    utilisateurId?: number | null
  }

  export type VueProduitUpdateInput = {
    dateVue?: DateTimeFieldUpdateOperationsInput | Date | string
    adresseIp?: NullableStringFieldUpdateOperationsInput | string | null
    produit?: ProduitUpdateOneRequiredWithoutVuesProduitesNestedInput
    utilisateur?: UtilisateurUpdateOneWithoutVuesProduitesNestedInput
  }

  export type VueProduitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateVue?: DateTimeFieldUpdateOperationsInput | Date | string
    adresseIp?: NullableStringFieldUpdateOperationsInput | string | null
    produitId?: IntFieldUpdateOperationsInput | number
    utilisateurId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VueProduitCreateManyInput = {
    id?: number
    dateVue?: Date | string
    adresseIp?: string | null
    produitId: number
    utilisateurId?: number | null
  }

  export type VueProduitUpdateManyMutationInput = {
    dateVue?: DateTimeFieldUpdateOperationsInput | Date | string
    adresseIp?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VueProduitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateVue?: DateTimeFieldUpdateOperationsInput | Date | string
    adresseIp?: NullableStringFieldUpdateOperationsInput | string | null
    produitId?: IntFieldUpdateOperationsInput | number
    utilisateurId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PaiementCreateInput = {
    reference: string
    montant: number
    prestataire: $Enums.PrestatairePaiement
    statut?: $Enums.StatutPaiement
    dateExpiration: Date | string
    dateCreation?: Date | string
    dateModification?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateur: UtilisateurCreateNestedOneWithoutPaiementsInput
    produit: ProduitCreateNestedOneWithoutPaiementsInput
    transactions?: TransactionCreateNestedManyWithoutPaiementInput
  }

  export type PaiementUncheckedCreateInput = {
    id?: number
    reference: string
    montant: number
    prestataire: $Enums.PrestatairePaiement
    statut?: $Enums.StatutPaiement
    dateExpiration: Date | string
    dateCreation?: Date | string
    dateModification?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateurId: number
    produitId: number
    transactions?: TransactionUncheckedCreateNestedManyWithoutPaiementInput
  }

  export type PaiementUpdateInput = {
    reference?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    prestataire?: EnumPrestatairePaiementFieldUpdateOperationsInput | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementFieldUpdateOperationsInput | $Enums.StatutPaiement
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateur?: UtilisateurUpdateOneRequiredWithoutPaiementsNestedInput
    produit?: ProduitUpdateOneRequiredWithoutPaiementsNestedInput
    transactions?: TransactionUpdateManyWithoutPaiementNestedInput
  }

  export type PaiementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reference?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    prestataire?: EnumPrestatairePaiementFieldUpdateOperationsInput | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementFieldUpdateOperationsInput | $Enums.StatutPaiement
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateurId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    transactions?: TransactionUncheckedUpdateManyWithoutPaiementNestedInput
  }

  export type PaiementCreateManyInput = {
    id?: number
    reference: string
    montant: number
    prestataire: $Enums.PrestatairePaiement
    statut?: $Enums.StatutPaiement
    dateExpiration: Date | string
    dateCreation?: Date | string
    dateModification?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateurId: number
    produitId: number
  }

  export type PaiementUpdateManyMutationInput = {
    reference?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    prestataire?: EnumPrestatairePaiementFieldUpdateOperationsInput | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementFieldUpdateOperationsInput | $Enums.StatutPaiement
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PaiementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reference?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    prestataire?: EnumPrestatairePaiementFieldUpdateOperationsInput | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementFieldUpdateOperationsInput | $Enums.StatutPaiement
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateurId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
  }

  export type TransactionCreateInput = {
    type: $Enums.TypeTransaction
    montant: number
    statut?: $Enums.StatutTransaction
    referenceExterne?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    paiement: PaiementCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: number
    type: $Enums.TypeTransaction
    montant: number
    statut?: $Enums.StatutTransaction
    referenceExterne?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    paiementId: number
  }

  export type TransactionUpdateInput = {
    type?: EnumTypeTransactionFieldUpdateOperationsInput | $Enums.TypeTransaction
    montant?: FloatFieldUpdateOperationsInput | number
    statut?: EnumStatutTransactionFieldUpdateOperationsInput | $Enums.StatutTransaction
    referenceExterne?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    paiement?: PaiementUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeTransactionFieldUpdateOperationsInput | $Enums.TypeTransaction
    montant?: FloatFieldUpdateOperationsInput | number
    statut?: EnumStatutTransactionFieldUpdateOperationsInput | $Enums.StatutTransaction
    referenceExterne?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    paiementId?: IntFieldUpdateOperationsInput | number
  }

  export type TransactionCreateManyInput = {
    id?: number
    type: $Enums.TypeTransaction
    montant: number
    statut?: $Enums.StatutTransaction
    referenceExterne?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    paiementId: number
  }

  export type TransactionUpdateManyMutationInput = {
    type?: EnumTypeTransactionFieldUpdateOperationsInput | $Enums.TypeTransaction
    montant?: FloatFieldUpdateOperationsInput | number
    statut?: EnumStatutTransactionFieldUpdateOperationsInput | $Enums.StatutTransaction
    referenceExterne?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeTransactionFieldUpdateOperationsInput | $Enums.TypeTransaction
    montant?: FloatFieldUpdateOperationsInput | number
    statut?: EnumStatutTransactionFieldUpdateOperationsInput | $Enums.StatutTransaction
    referenceExterne?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    paiementId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleUtilisateurFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleUtilisateur | EnumRoleUtilisateurFieldRefInput<$PrismaModel>
    in?: $Enums.RoleUtilisateur[]
    notIn?: $Enums.RoleUtilisateur[]
    not?: NestedEnumRoleUtilisateurFilter<$PrismaModel> | $Enums.RoleUtilisateur
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProduitListRelationFilter = {
    every?: ProduitWhereInput
    some?: ProduitWhereInput
    none?: ProduitWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type VueProduitListRelationFilter = {
    every?: VueProduitWhereInput
    some?: VueProduitWhereInput
    none?: VueProduitWhereInput
  }

  export type PaiementListRelationFilter = {
    every?: PaiementWhereInput
    some?: PaiementWhereInput
    none?: PaiementWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProduitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VueProduitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaiementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UtilisateurCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    motDePasse?: SortOrder
    role?: SortOrder
    estActif?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
  }

  export type UtilisateurAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UtilisateurMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    motDePasse?: SortOrder
    role?: SortOrder
    estActif?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
  }

  export type UtilisateurMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    motDePasse?: SortOrder
    role?: SortOrder
    estActif?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
  }

  export type UtilisateurSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleUtilisateurWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleUtilisateur | EnumRoleUtilisateurFieldRefInput<$PrismaModel>
    in?: $Enums.RoleUtilisateur[]
    notIn?: $Enums.RoleUtilisateur[]
    not?: NestedEnumRoleUtilisateurWithAggregatesFilter<$PrismaModel> | $Enums.RoleUtilisateur
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleUtilisateurFilter<$PrismaModel>
    _max?: NestedEnumRoleUtilisateurFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumStatutProduitFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutProduit | EnumStatutProduitFieldRefInput<$PrismaModel>
    in?: $Enums.StatutProduit[]
    notIn?: $Enums.StatutProduit[]
    not?: NestedEnumStatutProduitFilter<$PrismaModel> | $Enums.StatutProduit
  }

  export type UtilisateurRelationFilter = {
    is?: UtilisateurWhereInput
    isNot?: UtilisateurWhereInput
  }

  export type ProduitCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    prix?: SortOrder
    estVip?: SortOrder
    imageUrl?: SortOrder
    imagePublicId?: SortOrder
    vues?: SortOrder
    statut?: SortOrder
    localisation?: SortOrder
    categorie?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    dateExpiration?: SortOrder
    utilisateurId?: SortOrder
  }

  export type ProduitAvgOrderByAggregateInput = {
    id?: SortOrder
    prix?: SortOrder
    vues?: SortOrder
    utilisateurId?: SortOrder
  }

  export type ProduitMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    prix?: SortOrder
    estVip?: SortOrder
    imageUrl?: SortOrder
    imagePublicId?: SortOrder
    vues?: SortOrder
    statut?: SortOrder
    localisation?: SortOrder
    categorie?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    dateExpiration?: SortOrder
    utilisateurId?: SortOrder
  }

  export type ProduitMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    prix?: SortOrder
    estVip?: SortOrder
    imageUrl?: SortOrder
    imagePublicId?: SortOrder
    vues?: SortOrder
    statut?: SortOrder
    localisation?: SortOrder
    categorie?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    dateExpiration?: SortOrder
    utilisateurId?: SortOrder
  }

  export type ProduitSumOrderByAggregateInput = {
    id?: SortOrder
    prix?: SortOrder
    vues?: SortOrder
    utilisateurId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumStatutProduitWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutProduit | EnumStatutProduitFieldRefInput<$PrismaModel>
    in?: $Enums.StatutProduit[]
    notIn?: $Enums.StatutProduit[]
    not?: NestedEnumStatutProduitWithAggregatesFilter<$PrismaModel> | $Enums.StatutProduit
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutProduitFilter<$PrismaModel>
    _max?: NestedEnumStatutProduitFilter<$PrismaModel>
  }

  export type EnumTypeNotificationFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeNotification | EnumTypeNotificationFieldRefInput<$PrismaModel>
    in?: $Enums.TypeNotification[]
    notIn?: $Enums.TypeNotification[]
    not?: NestedEnumTypeNotificationFilter<$PrismaModel> | $Enums.TypeNotification
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    message?: SortOrder
    type?: SortOrder
    estLue?: SortOrder
    dateCreation?: SortOrder
    utilisateurId?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    utilisateurId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    message?: SortOrder
    type?: SortOrder
    estLue?: SortOrder
    dateCreation?: SortOrder
    utilisateurId?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    message?: SortOrder
    type?: SortOrder
    estLue?: SortOrder
    dateCreation?: SortOrder
    utilisateurId?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    utilisateurId?: SortOrder
  }

  export type EnumTypeNotificationWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeNotification | EnumTypeNotificationFieldRefInput<$PrismaModel>
    in?: $Enums.TypeNotification[]
    notIn?: $Enums.TypeNotification[]
    not?: NestedEnumTypeNotificationWithAggregatesFilter<$PrismaModel> | $Enums.TypeNotification
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeNotificationFilter<$PrismaModel>
    _max?: NestedEnumTypeNotificationFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ProduitRelationFilter = {
    is?: ProduitWhereInput
    isNot?: ProduitWhereInput
  }

  export type UtilisateurNullableRelationFilter = {
    is?: UtilisateurWhereInput | null
    isNot?: UtilisateurWhereInput | null
  }

  export type VueProduitProduitIdUtilisateurIdAdresseIpCompoundUniqueInput = {
    produitId: number
    utilisateurId: number
    adresseIp: string
  }

  export type VueProduitCountOrderByAggregateInput = {
    id?: SortOrder
    dateVue?: SortOrder
    adresseIp?: SortOrder
    produitId?: SortOrder
    utilisateurId?: SortOrder
  }

  export type VueProduitAvgOrderByAggregateInput = {
    id?: SortOrder
    produitId?: SortOrder
    utilisateurId?: SortOrder
  }

  export type VueProduitMaxOrderByAggregateInput = {
    id?: SortOrder
    dateVue?: SortOrder
    adresseIp?: SortOrder
    produitId?: SortOrder
    utilisateurId?: SortOrder
  }

  export type VueProduitMinOrderByAggregateInput = {
    id?: SortOrder
    dateVue?: SortOrder
    adresseIp?: SortOrder
    produitId?: SortOrder
    utilisateurId?: SortOrder
  }

  export type VueProduitSumOrderByAggregateInput = {
    id?: SortOrder
    produitId?: SortOrder
    utilisateurId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumPrestatairePaiementFilter<$PrismaModel = never> = {
    equals?: $Enums.PrestatairePaiement | EnumPrestatairePaiementFieldRefInput<$PrismaModel>
    in?: $Enums.PrestatairePaiement[]
    notIn?: $Enums.PrestatairePaiement[]
    not?: NestedEnumPrestatairePaiementFilter<$PrismaModel> | $Enums.PrestatairePaiement
  }

  export type EnumStatutPaiementFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutPaiement | EnumStatutPaiementFieldRefInput<$PrismaModel>
    in?: $Enums.StatutPaiement[]
    notIn?: $Enums.StatutPaiement[]
    not?: NestedEnumStatutPaiementFilter<$PrismaModel> | $Enums.StatutPaiement
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaiementCountOrderByAggregateInput = {
    id?: SortOrder
    reference?: SortOrder
    montant?: SortOrder
    prestataire?: SortOrder
    statut?: SortOrder
    dateExpiration?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    metadata?: SortOrder
    utilisateurId?: SortOrder
    produitId?: SortOrder
  }

  export type PaiementAvgOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    utilisateurId?: SortOrder
    produitId?: SortOrder
  }

  export type PaiementMaxOrderByAggregateInput = {
    id?: SortOrder
    reference?: SortOrder
    montant?: SortOrder
    prestataire?: SortOrder
    statut?: SortOrder
    dateExpiration?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    utilisateurId?: SortOrder
    produitId?: SortOrder
  }

  export type PaiementMinOrderByAggregateInput = {
    id?: SortOrder
    reference?: SortOrder
    montant?: SortOrder
    prestataire?: SortOrder
    statut?: SortOrder
    dateExpiration?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    utilisateurId?: SortOrder
    produitId?: SortOrder
  }

  export type PaiementSumOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    utilisateurId?: SortOrder
    produitId?: SortOrder
  }

  export type EnumPrestatairePaiementWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PrestatairePaiement | EnumPrestatairePaiementFieldRefInput<$PrismaModel>
    in?: $Enums.PrestatairePaiement[]
    notIn?: $Enums.PrestatairePaiement[]
    not?: NestedEnumPrestatairePaiementWithAggregatesFilter<$PrismaModel> | $Enums.PrestatairePaiement
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPrestatairePaiementFilter<$PrismaModel>
    _max?: NestedEnumPrestatairePaiementFilter<$PrismaModel>
  }

  export type EnumStatutPaiementWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutPaiement | EnumStatutPaiementFieldRefInput<$PrismaModel>
    in?: $Enums.StatutPaiement[]
    notIn?: $Enums.StatutPaiement[]
    not?: NestedEnumStatutPaiementWithAggregatesFilter<$PrismaModel> | $Enums.StatutPaiement
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutPaiementFilter<$PrismaModel>
    _max?: NestedEnumStatutPaiementFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumTypeTransactionFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeTransaction | EnumTypeTransactionFieldRefInput<$PrismaModel>
    in?: $Enums.TypeTransaction[]
    notIn?: $Enums.TypeTransaction[]
    not?: NestedEnumTypeTransactionFilter<$PrismaModel> | $Enums.TypeTransaction
  }

  export type EnumStatutTransactionFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutTransaction | EnumStatutTransactionFieldRefInput<$PrismaModel>
    in?: $Enums.StatutTransaction[]
    notIn?: $Enums.StatutTransaction[]
    not?: NestedEnumStatutTransactionFilter<$PrismaModel> | $Enums.StatutTransaction
  }

  export type PaiementRelationFilter = {
    is?: PaiementWhereInput
    isNot?: PaiementWhereInput
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    montant?: SortOrder
    statut?: SortOrder
    referenceExterne?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    details?: SortOrder
    paiementId?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    paiementId?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    montant?: SortOrder
    statut?: SortOrder
    referenceExterne?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    paiementId?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    montant?: SortOrder
    statut?: SortOrder
    referenceExterne?: SortOrder
    dateCreation?: SortOrder
    dateModification?: SortOrder
    paiementId?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    paiementId?: SortOrder
  }

  export type EnumTypeTransactionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeTransaction | EnumTypeTransactionFieldRefInput<$PrismaModel>
    in?: $Enums.TypeTransaction[]
    notIn?: $Enums.TypeTransaction[]
    not?: NestedEnumTypeTransactionWithAggregatesFilter<$PrismaModel> | $Enums.TypeTransaction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeTransactionFilter<$PrismaModel>
    _max?: NestedEnumTypeTransactionFilter<$PrismaModel>
  }

  export type EnumStatutTransactionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutTransaction | EnumStatutTransactionFieldRefInput<$PrismaModel>
    in?: $Enums.StatutTransaction[]
    notIn?: $Enums.StatutTransaction[]
    not?: NestedEnumStatutTransactionWithAggregatesFilter<$PrismaModel> | $Enums.StatutTransaction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutTransactionFilter<$PrismaModel>
    _max?: NestedEnumStatutTransactionFilter<$PrismaModel>
  }

  export type ProduitCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<ProduitCreateWithoutUtilisateurInput, ProduitUncheckedCreateWithoutUtilisateurInput> | ProduitCreateWithoutUtilisateurInput[] | ProduitUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutUtilisateurInput | ProduitCreateOrConnectWithoutUtilisateurInput[]
    createMany?: ProduitCreateManyUtilisateurInputEnvelope
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<NotificationCreateWithoutUtilisateurInput, NotificationUncheckedCreateWithoutUtilisateurInput> | NotificationCreateWithoutUtilisateurInput[] | NotificationUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUtilisateurInput | NotificationCreateOrConnectWithoutUtilisateurInput[]
    createMany?: NotificationCreateManyUtilisateurInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type VueProduitCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<VueProduitCreateWithoutUtilisateurInput, VueProduitUncheckedCreateWithoutUtilisateurInput> | VueProduitCreateWithoutUtilisateurInput[] | VueProduitUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: VueProduitCreateOrConnectWithoutUtilisateurInput | VueProduitCreateOrConnectWithoutUtilisateurInput[]
    createMany?: VueProduitCreateManyUtilisateurInputEnvelope
    connect?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
  }

  export type PaiementCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<PaiementCreateWithoutUtilisateurInput, PaiementUncheckedCreateWithoutUtilisateurInput> | PaiementCreateWithoutUtilisateurInput[] | PaiementUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutUtilisateurInput | PaiementCreateOrConnectWithoutUtilisateurInput[]
    createMany?: PaiementCreateManyUtilisateurInputEnvelope
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
  }

  export type ProduitUncheckedCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<ProduitCreateWithoutUtilisateurInput, ProduitUncheckedCreateWithoutUtilisateurInput> | ProduitCreateWithoutUtilisateurInput[] | ProduitUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutUtilisateurInput | ProduitCreateOrConnectWithoutUtilisateurInput[]
    createMany?: ProduitCreateManyUtilisateurInputEnvelope
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<NotificationCreateWithoutUtilisateurInput, NotificationUncheckedCreateWithoutUtilisateurInput> | NotificationCreateWithoutUtilisateurInput[] | NotificationUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUtilisateurInput | NotificationCreateOrConnectWithoutUtilisateurInput[]
    createMany?: NotificationCreateManyUtilisateurInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type VueProduitUncheckedCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<VueProduitCreateWithoutUtilisateurInput, VueProduitUncheckedCreateWithoutUtilisateurInput> | VueProduitCreateWithoutUtilisateurInput[] | VueProduitUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: VueProduitCreateOrConnectWithoutUtilisateurInput | VueProduitCreateOrConnectWithoutUtilisateurInput[]
    createMany?: VueProduitCreateManyUtilisateurInputEnvelope
    connect?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
  }

  export type PaiementUncheckedCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<PaiementCreateWithoutUtilisateurInput, PaiementUncheckedCreateWithoutUtilisateurInput> | PaiementCreateWithoutUtilisateurInput[] | PaiementUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutUtilisateurInput | PaiementCreateOrConnectWithoutUtilisateurInput[]
    createMany?: PaiementCreateManyUtilisateurInputEnvelope
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleUtilisateurFieldUpdateOperationsInput = {
    set?: $Enums.RoleUtilisateur
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProduitUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<ProduitCreateWithoutUtilisateurInput, ProduitUncheckedCreateWithoutUtilisateurInput> | ProduitCreateWithoutUtilisateurInput[] | ProduitUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutUtilisateurInput | ProduitCreateOrConnectWithoutUtilisateurInput[]
    upsert?: ProduitUpsertWithWhereUniqueWithoutUtilisateurInput | ProduitUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: ProduitCreateManyUtilisateurInputEnvelope
    set?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    disconnect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    delete?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    update?: ProduitUpdateWithWhereUniqueWithoutUtilisateurInput | ProduitUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: ProduitUpdateManyWithWhereWithoutUtilisateurInput | ProduitUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<NotificationCreateWithoutUtilisateurInput, NotificationUncheckedCreateWithoutUtilisateurInput> | NotificationCreateWithoutUtilisateurInput[] | NotificationUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUtilisateurInput | NotificationCreateOrConnectWithoutUtilisateurInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUtilisateurInput | NotificationUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: NotificationCreateManyUtilisateurInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUtilisateurInput | NotificationUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUtilisateurInput | NotificationUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type VueProduitUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<VueProduitCreateWithoutUtilisateurInput, VueProduitUncheckedCreateWithoutUtilisateurInput> | VueProduitCreateWithoutUtilisateurInput[] | VueProduitUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: VueProduitCreateOrConnectWithoutUtilisateurInput | VueProduitCreateOrConnectWithoutUtilisateurInput[]
    upsert?: VueProduitUpsertWithWhereUniqueWithoutUtilisateurInput | VueProduitUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: VueProduitCreateManyUtilisateurInputEnvelope
    set?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    disconnect?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    delete?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    connect?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    update?: VueProduitUpdateWithWhereUniqueWithoutUtilisateurInput | VueProduitUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: VueProduitUpdateManyWithWhereWithoutUtilisateurInput | VueProduitUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: VueProduitScalarWhereInput | VueProduitScalarWhereInput[]
  }

  export type PaiementUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<PaiementCreateWithoutUtilisateurInput, PaiementUncheckedCreateWithoutUtilisateurInput> | PaiementCreateWithoutUtilisateurInput[] | PaiementUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutUtilisateurInput | PaiementCreateOrConnectWithoutUtilisateurInput[]
    upsert?: PaiementUpsertWithWhereUniqueWithoutUtilisateurInput | PaiementUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: PaiementCreateManyUtilisateurInputEnvelope
    set?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    disconnect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    delete?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    update?: PaiementUpdateWithWhereUniqueWithoutUtilisateurInput | PaiementUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: PaiementUpdateManyWithWhereWithoutUtilisateurInput | PaiementUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProduitUncheckedUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<ProduitCreateWithoutUtilisateurInput, ProduitUncheckedCreateWithoutUtilisateurInput> | ProduitCreateWithoutUtilisateurInput[] | ProduitUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutUtilisateurInput | ProduitCreateOrConnectWithoutUtilisateurInput[]
    upsert?: ProduitUpsertWithWhereUniqueWithoutUtilisateurInput | ProduitUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: ProduitCreateManyUtilisateurInputEnvelope
    set?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    disconnect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    delete?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    update?: ProduitUpdateWithWhereUniqueWithoutUtilisateurInput | ProduitUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: ProduitUpdateManyWithWhereWithoutUtilisateurInput | ProduitUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<NotificationCreateWithoutUtilisateurInput, NotificationUncheckedCreateWithoutUtilisateurInput> | NotificationCreateWithoutUtilisateurInput[] | NotificationUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUtilisateurInput | NotificationCreateOrConnectWithoutUtilisateurInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUtilisateurInput | NotificationUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: NotificationCreateManyUtilisateurInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUtilisateurInput | NotificationUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUtilisateurInput | NotificationUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type VueProduitUncheckedUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<VueProduitCreateWithoutUtilisateurInput, VueProduitUncheckedCreateWithoutUtilisateurInput> | VueProduitCreateWithoutUtilisateurInput[] | VueProduitUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: VueProduitCreateOrConnectWithoutUtilisateurInput | VueProduitCreateOrConnectWithoutUtilisateurInput[]
    upsert?: VueProduitUpsertWithWhereUniqueWithoutUtilisateurInput | VueProduitUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: VueProduitCreateManyUtilisateurInputEnvelope
    set?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    disconnect?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    delete?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    connect?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    update?: VueProduitUpdateWithWhereUniqueWithoutUtilisateurInput | VueProduitUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: VueProduitUpdateManyWithWhereWithoutUtilisateurInput | VueProduitUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: VueProduitScalarWhereInput | VueProduitScalarWhereInput[]
  }

  export type PaiementUncheckedUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<PaiementCreateWithoutUtilisateurInput, PaiementUncheckedCreateWithoutUtilisateurInput> | PaiementCreateWithoutUtilisateurInput[] | PaiementUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutUtilisateurInput | PaiementCreateOrConnectWithoutUtilisateurInput[]
    upsert?: PaiementUpsertWithWhereUniqueWithoutUtilisateurInput | PaiementUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: PaiementCreateManyUtilisateurInputEnvelope
    set?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    disconnect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    delete?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    update?: PaiementUpdateWithWhereUniqueWithoutUtilisateurInput | PaiementUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: PaiementUpdateManyWithWhereWithoutUtilisateurInput | PaiementUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
  }

  export type UtilisateurCreateNestedOneWithoutProduitsInput = {
    create?: XOR<UtilisateurCreateWithoutProduitsInput, UtilisateurUncheckedCreateWithoutProduitsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutProduitsInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type VueProduitCreateNestedManyWithoutProduitInput = {
    create?: XOR<VueProduitCreateWithoutProduitInput, VueProduitUncheckedCreateWithoutProduitInput> | VueProduitCreateWithoutProduitInput[] | VueProduitUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: VueProduitCreateOrConnectWithoutProduitInput | VueProduitCreateOrConnectWithoutProduitInput[]
    createMany?: VueProduitCreateManyProduitInputEnvelope
    connect?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
  }

  export type PaiementCreateNestedManyWithoutProduitInput = {
    create?: XOR<PaiementCreateWithoutProduitInput, PaiementUncheckedCreateWithoutProduitInput> | PaiementCreateWithoutProduitInput[] | PaiementUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutProduitInput | PaiementCreateOrConnectWithoutProduitInput[]
    createMany?: PaiementCreateManyProduitInputEnvelope
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
  }

  export type VueProduitUncheckedCreateNestedManyWithoutProduitInput = {
    create?: XOR<VueProduitCreateWithoutProduitInput, VueProduitUncheckedCreateWithoutProduitInput> | VueProduitCreateWithoutProduitInput[] | VueProduitUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: VueProduitCreateOrConnectWithoutProduitInput | VueProduitCreateOrConnectWithoutProduitInput[]
    createMany?: VueProduitCreateManyProduitInputEnvelope
    connect?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
  }

  export type PaiementUncheckedCreateNestedManyWithoutProduitInput = {
    create?: XOR<PaiementCreateWithoutProduitInput, PaiementUncheckedCreateWithoutProduitInput> | PaiementCreateWithoutProduitInput[] | PaiementUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutProduitInput | PaiementCreateOrConnectWithoutProduitInput[]
    createMany?: PaiementCreateManyProduitInputEnvelope
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumStatutProduitFieldUpdateOperationsInput = {
    set?: $Enums.StatutProduit
  }

  export type UtilisateurUpdateOneRequiredWithoutProduitsNestedInput = {
    create?: XOR<UtilisateurCreateWithoutProduitsInput, UtilisateurUncheckedCreateWithoutProduitsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutProduitsInput
    upsert?: UtilisateurUpsertWithoutProduitsInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutProduitsInput, UtilisateurUpdateWithoutProduitsInput>, UtilisateurUncheckedUpdateWithoutProduitsInput>
  }

  export type VueProduitUpdateManyWithoutProduitNestedInput = {
    create?: XOR<VueProduitCreateWithoutProduitInput, VueProduitUncheckedCreateWithoutProduitInput> | VueProduitCreateWithoutProduitInput[] | VueProduitUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: VueProduitCreateOrConnectWithoutProduitInput | VueProduitCreateOrConnectWithoutProduitInput[]
    upsert?: VueProduitUpsertWithWhereUniqueWithoutProduitInput | VueProduitUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: VueProduitCreateManyProduitInputEnvelope
    set?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    disconnect?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    delete?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    connect?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    update?: VueProduitUpdateWithWhereUniqueWithoutProduitInput | VueProduitUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: VueProduitUpdateManyWithWhereWithoutProduitInput | VueProduitUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: VueProduitScalarWhereInput | VueProduitScalarWhereInput[]
  }

  export type PaiementUpdateManyWithoutProduitNestedInput = {
    create?: XOR<PaiementCreateWithoutProduitInput, PaiementUncheckedCreateWithoutProduitInput> | PaiementCreateWithoutProduitInput[] | PaiementUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutProduitInput | PaiementCreateOrConnectWithoutProduitInput[]
    upsert?: PaiementUpsertWithWhereUniqueWithoutProduitInput | PaiementUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: PaiementCreateManyProduitInputEnvelope
    set?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    disconnect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    delete?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    update?: PaiementUpdateWithWhereUniqueWithoutProduitInput | PaiementUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: PaiementUpdateManyWithWhereWithoutProduitInput | PaiementUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
  }

  export type VueProduitUncheckedUpdateManyWithoutProduitNestedInput = {
    create?: XOR<VueProduitCreateWithoutProduitInput, VueProduitUncheckedCreateWithoutProduitInput> | VueProduitCreateWithoutProduitInput[] | VueProduitUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: VueProduitCreateOrConnectWithoutProduitInput | VueProduitCreateOrConnectWithoutProduitInput[]
    upsert?: VueProduitUpsertWithWhereUniqueWithoutProduitInput | VueProduitUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: VueProduitCreateManyProduitInputEnvelope
    set?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    disconnect?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    delete?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    connect?: VueProduitWhereUniqueInput | VueProduitWhereUniqueInput[]
    update?: VueProduitUpdateWithWhereUniqueWithoutProduitInput | VueProduitUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: VueProduitUpdateManyWithWhereWithoutProduitInput | VueProduitUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: VueProduitScalarWhereInput | VueProduitScalarWhereInput[]
  }

  export type PaiementUncheckedUpdateManyWithoutProduitNestedInput = {
    create?: XOR<PaiementCreateWithoutProduitInput, PaiementUncheckedCreateWithoutProduitInput> | PaiementCreateWithoutProduitInput[] | PaiementUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutProduitInput | PaiementCreateOrConnectWithoutProduitInput[]
    upsert?: PaiementUpsertWithWhereUniqueWithoutProduitInput | PaiementUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: PaiementCreateManyProduitInputEnvelope
    set?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    disconnect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    delete?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    update?: PaiementUpdateWithWhereUniqueWithoutProduitInput | PaiementUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: PaiementUpdateManyWithWhereWithoutProduitInput | PaiementUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
  }

  export type UtilisateurCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UtilisateurCreateWithoutNotificationsInput, UtilisateurUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutNotificationsInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type EnumTypeNotificationFieldUpdateOperationsInput = {
    set?: $Enums.TypeNotification
  }

  export type UtilisateurUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UtilisateurCreateWithoutNotificationsInput, UtilisateurUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutNotificationsInput
    upsert?: UtilisateurUpsertWithoutNotificationsInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutNotificationsInput, UtilisateurUpdateWithoutNotificationsInput>, UtilisateurUncheckedUpdateWithoutNotificationsInput>
  }

  export type ProduitCreateNestedOneWithoutVuesProduitesInput = {
    create?: XOR<ProduitCreateWithoutVuesProduitesInput, ProduitUncheckedCreateWithoutVuesProduitesInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutVuesProduitesInput
    connect?: ProduitWhereUniqueInput
  }

  export type UtilisateurCreateNestedOneWithoutVuesProduitesInput = {
    create?: XOR<UtilisateurCreateWithoutVuesProduitesInput, UtilisateurUncheckedCreateWithoutVuesProduitesInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutVuesProduitesInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type ProduitUpdateOneRequiredWithoutVuesProduitesNestedInput = {
    create?: XOR<ProduitCreateWithoutVuesProduitesInput, ProduitUncheckedCreateWithoutVuesProduitesInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutVuesProduitesInput
    upsert?: ProduitUpsertWithoutVuesProduitesInput
    connect?: ProduitWhereUniqueInput
    update?: XOR<XOR<ProduitUpdateToOneWithWhereWithoutVuesProduitesInput, ProduitUpdateWithoutVuesProduitesInput>, ProduitUncheckedUpdateWithoutVuesProduitesInput>
  }

  export type UtilisateurUpdateOneWithoutVuesProduitesNestedInput = {
    create?: XOR<UtilisateurCreateWithoutVuesProduitesInput, UtilisateurUncheckedCreateWithoutVuesProduitesInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutVuesProduitesInput
    upsert?: UtilisateurUpsertWithoutVuesProduitesInput
    disconnect?: UtilisateurWhereInput | boolean
    delete?: UtilisateurWhereInput | boolean
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutVuesProduitesInput, UtilisateurUpdateWithoutVuesProduitesInput>, UtilisateurUncheckedUpdateWithoutVuesProduitesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UtilisateurCreateNestedOneWithoutPaiementsInput = {
    create?: XOR<UtilisateurCreateWithoutPaiementsInput, UtilisateurUncheckedCreateWithoutPaiementsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutPaiementsInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type ProduitCreateNestedOneWithoutPaiementsInput = {
    create?: XOR<ProduitCreateWithoutPaiementsInput, ProduitUncheckedCreateWithoutPaiementsInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutPaiementsInput
    connect?: ProduitWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutPaiementInput = {
    create?: XOR<TransactionCreateWithoutPaiementInput, TransactionUncheckedCreateWithoutPaiementInput> | TransactionCreateWithoutPaiementInput[] | TransactionUncheckedCreateWithoutPaiementInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutPaiementInput | TransactionCreateOrConnectWithoutPaiementInput[]
    createMany?: TransactionCreateManyPaiementInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutPaiementInput = {
    create?: XOR<TransactionCreateWithoutPaiementInput, TransactionUncheckedCreateWithoutPaiementInput> | TransactionCreateWithoutPaiementInput[] | TransactionUncheckedCreateWithoutPaiementInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutPaiementInput | TransactionCreateOrConnectWithoutPaiementInput[]
    createMany?: TransactionCreateManyPaiementInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type EnumPrestatairePaiementFieldUpdateOperationsInput = {
    set?: $Enums.PrestatairePaiement
  }

  export type EnumStatutPaiementFieldUpdateOperationsInput = {
    set?: $Enums.StatutPaiement
  }

  export type UtilisateurUpdateOneRequiredWithoutPaiementsNestedInput = {
    create?: XOR<UtilisateurCreateWithoutPaiementsInput, UtilisateurUncheckedCreateWithoutPaiementsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutPaiementsInput
    upsert?: UtilisateurUpsertWithoutPaiementsInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutPaiementsInput, UtilisateurUpdateWithoutPaiementsInput>, UtilisateurUncheckedUpdateWithoutPaiementsInput>
  }

  export type ProduitUpdateOneRequiredWithoutPaiementsNestedInput = {
    create?: XOR<ProduitCreateWithoutPaiementsInput, ProduitUncheckedCreateWithoutPaiementsInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutPaiementsInput
    upsert?: ProduitUpsertWithoutPaiementsInput
    connect?: ProduitWhereUniqueInput
    update?: XOR<XOR<ProduitUpdateToOneWithWhereWithoutPaiementsInput, ProduitUpdateWithoutPaiementsInput>, ProduitUncheckedUpdateWithoutPaiementsInput>
  }

  export type TransactionUpdateManyWithoutPaiementNestedInput = {
    create?: XOR<TransactionCreateWithoutPaiementInput, TransactionUncheckedCreateWithoutPaiementInput> | TransactionCreateWithoutPaiementInput[] | TransactionUncheckedCreateWithoutPaiementInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutPaiementInput | TransactionCreateOrConnectWithoutPaiementInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutPaiementInput | TransactionUpsertWithWhereUniqueWithoutPaiementInput[]
    createMany?: TransactionCreateManyPaiementInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutPaiementInput | TransactionUpdateWithWhereUniqueWithoutPaiementInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutPaiementInput | TransactionUpdateManyWithWhereWithoutPaiementInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutPaiementNestedInput = {
    create?: XOR<TransactionCreateWithoutPaiementInput, TransactionUncheckedCreateWithoutPaiementInput> | TransactionCreateWithoutPaiementInput[] | TransactionUncheckedCreateWithoutPaiementInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutPaiementInput | TransactionCreateOrConnectWithoutPaiementInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutPaiementInput | TransactionUpsertWithWhereUniqueWithoutPaiementInput[]
    createMany?: TransactionCreateManyPaiementInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutPaiementInput | TransactionUpdateWithWhereUniqueWithoutPaiementInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutPaiementInput | TransactionUpdateManyWithWhereWithoutPaiementInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type PaiementCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<PaiementCreateWithoutTransactionsInput, PaiementUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: PaiementCreateOrConnectWithoutTransactionsInput
    connect?: PaiementWhereUniqueInput
  }

  export type EnumTypeTransactionFieldUpdateOperationsInput = {
    set?: $Enums.TypeTransaction
  }

  export type EnumStatutTransactionFieldUpdateOperationsInput = {
    set?: $Enums.StatutTransaction
  }

  export type PaiementUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<PaiementCreateWithoutTransactionsInput, PaiementUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: PaiementCreateOrConnectWithoutTransactionsInput
    upsert?: PaiementUpsertWithoutTransactionsInput
    connect?: PaiementWhereUniqueInput
    update?: XOR<XOR<PaiementUpdateToOneWithWhereWithoutTransactionsInput, PaiementUpdateWithoutTransactionsInput>, PaiementUncheckedUpdateWithoutTransactionsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRoleUtilisateurFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleUtilisateur | EnumRoleUtilisateurFieldRefInput<$PrismaModel>
    in?: $Enums.RoleUtilisateur[]
    notIn?: $Enums.RoleUtilisateur[]
    not?: NestedEnumRoleUtilisateurFilter<$PrismaModel> | $Enums.RoleUtilisateur
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleUtilisateurWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleUtilisateur | EnumRoleUtilisateurFieldRefInput<$PrismaModel>
    in?: $Enums.RoleUtilisateur[]
    notIn?: $Enums.RoleUtilisateur[]
    not?: NestedEnumRoleUtilisateurWithAggregatesFilter<$PrismaModel> | $Enums.RoleUtilisateur
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleUtilisateurFilter<$PrismaModel>
    _max?: NestedEnumRoleUtilisateurFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumStatutProduitFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutProduit | EnumStatutProduitFieldRefInput<$PrismaModel>
    in?: $Enums.StatutProduit[]
    notIn?: $Enums.StatutProduit[]
    not?: NestedEnumStatutProduitFilter<$PrismaModel> | $Enums.StatutProduit
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumStatutProduitWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutProduit | EnumStatutProduitFieldRefInput<$PrismaModel>
    in?: $Enums.StatutProduit[]
    notIn?: $Enums.StatutProduit[]
    not?: NestedEnumStatutProduitWithAggregatesFilter<$PrismaModel> | $Enums.StatutProduit
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutProduitFilter<$PrismaModel>
    _max?: NestedEnumStatutProduitFilter<$PrismaModel>
  }

  export type NestedEnumTypeNotificationFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeNotification | EnumTypeNotificationFieldRefInput<$PrismaModel>
    in?: $Enums.TypeNotification[]
    notIn?: $Enums.TypeNotification[]
    not?: NestedEnumTypeNotificationFilter<$PrismaModel> | $Enums.TypeNotification
  }

  export type NestedEnumTypeNotificationWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeNotification | EnumTypeNotificationFieldRefInput<$PrismaModel>
    in?: $Enums.TypeNotification[]
    notIn?: $Enums.TypeNotification[]
    not?: NestedEnumTypeNotificationWithAggregatesFilter<$PrismaModel> | $Enums.TypeNotification
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeNotificationFilter<$PrismaModel>
    _max?: NestedEnumTypeNotificationFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPrestatairePaiementFilter<$PrismaModel = never> = {
    equals?: $Enums.PrestatairePaiement | EnumPrestatairePaiementFieldRefInput<$PrismaModel>
    in?: $Enums.PrestatairePaiement[]
    notIn?: $Enums.PrestatairePaiement[]
    not?: NestedEnumPrestatairePaiementFilter<$PrismaModel> | $Enums.PrestatairePaiement
  }

  export type NestedEnumStatutPaiementFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutPaiement | EnumStatutPaiementFieldRefInput<$PrismaModel>
    in?: $Enums.StatutPaiement[]
    notIn?: $Enums.StatutPaiement[]
    not?: NestedEnumStatutPaiementFilter<$PrismaModel> | $Enums.StatutPaiement
  }

  export type NestedEnumPrestatairePaiementWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PrestatairePaiement | EnumPrestatairePaiementFieldRefInput<$PrismaModel>
    in?: $Enums.PrestatairePaiement[]
    notIn?: $Enums.PrestatairePaiement[]
    not?: NestedEnumPrestatairePaiementWithAggregatesFilter<$PrismaModel> | $Enums.PrestatairePaiement
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPrestatairePaiementFilter<$PrismaModel>
    _max?: NestedEnumPrestatairePaiementFilter<$PrismaModel>
  }

  export type NestedEnumStatutPaiementWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutPaiement | EnumStatutPaiementFieldRefInput<$PrismaModel>
    in?: $Enums.StatutPaiement[]
    notIn?: $Enums.StatutPaiement[]
    not?: NestedEnumStatutPaiementWithAggregatesFilter<$PrismaModel> | $Enums.StatutPaiement
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutPaiementFilter<$PrismaModel>
    _max?: NestedEnumStatutPaiementFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumTypeTransactionFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeTransaction | EnumTypeTransactionFieldRefInput<$PrismaModel>
    in?: $Enums.TypeTransaction[]
    notIn?: $Enums.TypeTransaction[]
    not?: NestedEnumTypeTransactionFilter<$PrismaModel> | $Enums.TypeTransaction
  }

  export type NestedEnumStatutTransactionFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutTransaction | EnumStatutTransactionFieldRefInput<$PrismaModel>
    in?: $Enums.StatutTransaction[]
    notIn?: $Enums.StatutTransaction[]
    not?: NestedEnumStatutTransactionFilter<$PrismaModel> | $Enums.StatutTransaction
  }

  export type NestedEnumTypeTransactionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeTransaction | EnumTypeTransactionFieldRefInput<$PrismaModel>
    in?: $Enums.TypeTransaction[]
    notIn?: $Enums.TypeTransaction[]
    not?: NestedEnumTypeTransactionWithAggregatesFilter<$PrismaModel> | $Enums.TypeTransaction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeTransactionFilter<$PrismaModel>
    _max?: NestedEnumTypeTransactionFilter<$PrismaModel>
  }

  export type NestedEnumStatutTransactionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutTransaction | EnumStatutTransactionFieldRefInput<$PrismaModel>
    in?: $Enums.StatutTransaction[]
    notIn?: $Enums.StatutTransaction[]
    not?: NestedEnumStatutTransactionWithAggregatesFilter<$PrismaModel> | $Enums.StatutTransaction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutTransactionFilter<$PrismaModel>
    _max?: NestedEnumStatutTransactionFilter<$PrismaModel>
  }

  export type ProduitCreateWithoutUtilisateurInput = {
    titre: string
    description: string
    prix: number
    estVip?: boolean
    imageUrl: string
    imagePublicId?: string | null
    vues?: number
    statut?: $Enums.StatutProduit
    localisation?: string | null
    categorie?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    dateExpiration: Date | string
    vuesProduites?: VueProduitCreateNestedManyWithoutProduitInput
    paiements?: PaiementCreateNestedManyWithoutProduitInput
  }

  export type ProduitUncheckedCreateWithoutUtilisateurInput = {
    id?: number
    titre: string
    description: string
    prix: number
    estVip?: boolean
    imageUrl: string
    imagePublicId?: string | null
    vues?: number
    statut?: $Enums.StatutProduit
    localisation?: string | null
    categorie?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    dateExpiration: Date | string
    vuesProduites?: VueProduitUncheckedCreateNestedManyWithoutProduitInput
    paiements?: PaiementUncheckedCreateNestedManyWithoutProduitInput
  }

  export type ProduitCreateOrConnectWithoutUtilisateurInput = {
    where: ProduitWhereUniqueInput
    create: XOR<ProduitCreateWithoutUtilisateurInput, ProduitUncheckedCreateWithoutUtilisateurInput>
  }

  export type ProduitCreateManyUtilisateurInputEnvelope = {
    data: ProduitCreateManyUtilisateurInput | ProduitCreateManyUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUtilisateurInput = {
    titre: string
    message: string
    type?: $Enums.TypeNotification
    estLue?: boolean
    dateCreation?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUtilisateurInput = {
    id?: number
    titre: string
    message: string
    type?: $Enums.TypeNotification
    estLue?: boolean
    dateCreation?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUtilisateurInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUtilisateurInput, NotificationUncheckedCreateWithoutUtilisateurInput>
  }

  export type NotificationCreateManyUtilisateurInputEnvelope = {
    data: NotificationCreateManyUtilisateurInput | NotificationCreateManyUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type VueProduitCreateWithoutUtilisateurInput = {
    dateVue?: Date | string
    adresseIp?: string | null
    produit: ProduitCreateNestedOneWithoutVuesProduitesInput
  }

  export type VueProduitUncheckedCreateWithoutUtilisateurInput = {
    id?: number
    dateVue?: Date | string
    adresseIp?: string | null
    produitId: number
  }

  export type VueProduitCreateOrConnectWithoutUtilisateurInput = {
    where: VueProduitWhereUniqueInput
    create: XOR<VueProduitCreateWithoutUtilisateurInput, VueProduitUncheckedCreateWithoutUtilisateurInput>
  }

  export type VueProduitCreateManyUtilisateurInputEnvelope = {
    data: VueProduitCreateManyUtilisateurInput | VueProduitCreateManyUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type PaiementCreateWithoutUtilisateurInput = {
    reference: string
    montant: number
    prestataire: $Enums.PrestatairePaiement
    statut?: $Enums.StatutPaiement
    dateExpiration: Date | string
    dateCreation?: Date | string
    dateModification?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    produit: ProduitCreateNestedOneWithoutPaiementsInput
    transactions?: TransactionCreateNestedManyWithoutPaiementInput
  }

  export type PaiementUncheckedCreateWithoutUtilisateurInput = {
    id?: number
    reference: string
    montant: number
    prestataire: $Enums.PrestatairePaiement
    statut?: $Enums.StatutPaiement
    dateExpiration: Date | string
    dateCreation?: Date | string
    dateModification?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    produitId: number
    transactions?: TransactionUncheckedCreateNestedManyWithoutPaiementInput
  }

  export type PaiementCreateOrConnectWithoutUtilisateurInput = {
    where: PaiementWhereUniqueInput
    create: XOR<PaiementCreateWithoutUtilisateurInput, PaiementUncheckedCreateWithoutUtilisateurInput>
  }

  export type PaiementCreateManyUtilisateurInputEnvelope = {
    data: PaiementCreateManyUtilisateurInput | PaiementCreateManyUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type ProduitUpsertWithWhereUniqueWithoutUtilisateurInput = {
    where: ProduitWhereUniqueInput
    update: XOR<ProduitUpdateWithoutUtilisateurInput, ProduitUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<ProduitCreateWithoutUtilisateurInput, ProduitUncheckedCreateWithoutUtilisateurInput>
  }

  export type ProduitUpdateWithWhereUniqueWithoutUtilisateurInput = {
    where: ProduitWhereUniqueInput
    data: XOR<ProduitUpdateWithoutUtilisateurInput, ProduitUncheckedUpdateWithoutUtilisateurInput>
  }

  export type ProduitUpdateManyWithWhereWithoutUtilisateurInput = {
    where: ProduitScalarWhereInput
    data: XOR<ProduitUpdateManyMutationInput, ProduitUncheckedUpdateManyWithoutUtilisateurInput>
  }

  export type ProduitScalarWhereInput = {
    AND?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
    OR?: ProduitScalarWhereInput[]
    NOT?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
    id?: IntFilter<"Produit"> | number
    titre?: StringFilter<"Produit"> | string
    description?: StringFilter<"Produit"> | string
    prix?: FloatFilter<"Produit"> | number
    estVip?: BoolFilter<"Produit"> | boolean
    imageUrl?: StringFilter<"Produit"> | string
    imagePublicId?: StringNullableFilter<"Produit"> | string | null
    vues?: IntFilter<"Produit"> | number
    statut?: EnumStatutProduitFilter<"Produit"> | $Enums.StatutProduit
    localisation?: StringNullableFilter<"Produit"> | string | null
    categorie?: StringNullableFilter<"Produit"> | string | null
    dateCreation?: DateTimeFilter<"Produit"> | Date | string
    dateModification?: DateTimeFilter<"Produit"> | Date | string
    dateExpiration?: DateTimeFilter<"Produit"> | Date | string
    utilisateurId?: IntFilter<"Produit"> | number
  }

  export type NotificationUpsertWithWhereUniqueWithoutUtilisateurInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUtilisateurInput, NotificationUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<NotificationCreateWithoutUtilisateurInput, NotificationUncheckedCreateWithoutUtilisateurInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUtilisateurInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUtilisateurInput, NotificationUncheckedUpdateWithoutUtilisateurInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUtilisateurInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUtilisateurInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    titre?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumTypeNotificationFilter<"Notification"> | $Enums.TypeNotification
    estLue?: BoolFilter<"Notification"> | boolean
    dateCreation?: DateTimeFilter<"Notification"> | Date | string
    utilisateurId?: IntFilter<"Notification"> | number
  }

  export type VueProduitUpsertWithWhereUniqueWithoutUtilisateurInput = {
    where: VueProduitWhereUniqueInput
    update: XOR<VueProduitUpdateWithoutUtilisateurInput, VueProduitUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<VueProduitCreateWithoutUtilisateurInput, VueProduitUncheckedCreateWithoutUtilisateurInput>
  }

  export type VueProduitUpdateWithWhereUniqueWithoutUtilisateurInput = {
    where: VueProduitWhereUniqueInput
    data: XOR<VueProduitUpdateWithoutUtilisateurInput, VueProduitUncheckedUpdateWithoutUtilisateurInput>
  }

  export type VueProduitUpdateManyWithWhereWithoutUtilisateurInput = {
    where: VueProduitScalarWhereInput
    data: XOR<VueProduitUpdateManyMutationInput, VueProduitUncheckedUpdateManyWithoutUtilisateurInput>
  }

  export type VueProduitScalarWhereInput = {
    AND?: VueProduitScalarWhereInput | VueProduitScalarWhereInput[]
    OR?: VueProduitScalarWhereInput[]
    NOT?: VueProduitScalarWhereInput | VueProduitScalarWhereInput[]
    id?: IntFilter<"VueProduit"> | number
    dateVue?: DateTimeFilter<"VueProduit"> | Date | string
    adresseIp?: StringNullableFilter<"VueProduit"> | string | null
    produitId?: IntFilter<"VueProduit"> | number
    utilisateurId?: IntNullableFilter<"VueProduit"> | number | null
  }

  export type PaiementUpsertWithWhereUniqueWithoutUtilisateurInput = {
    where: PaiementWhereUniqueInput
    update: XOR<PaiementUpdateWithoutUtilisateurInput, PaiementUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<PaiementCreateWithoutUtilisateurInput, PaiementUncheckedCreateWithoutUtilisateurInput>
  }

  export type PaiementUpdateWithWhereUniqueWithoutUtilisateurInput = {
    where: PaiementWhereUniqueInput
    data: XOR<PaiementUpdateWithoutUtilisateurInput, PaiementUncheckedUpdateWithoutUtilisateurInput>
  }

  export type PaiementUpdateManyWithWhereWithoutUtilisateurInput = {
    where: PaiementScalarWhereInput
    data: XOR<PaiementUpdateManyMutationInput, PaiementUncheckedUpdateManyWithoutUtilisateurInput>
  }

  export type PaiementScalarWhereInput = {
    AND?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
    OR?: PaiementScalarWhereInput[]
    NOT?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
    id?: IntFilter<"Paiement"> | number
    reference?: StringFilter<"Paiement"> | string
    montant?: FloatFilter<"Paiement"> | number
    prestataire?: EnumPrestatairePaiementFilter<"Paiement"> | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementFilter<"Paiement"> | $Enums.StatutPaiement
    dateExpiration?: DateTimeFilter<"Paiement"> | Date | string
    dateCreation?: DateTimeFilter<"Paiement"> | Date | string
    dateModification?: DateTimeFilter<"Paiement"> | Date | string
    metadata?: JsonNullableFilter<"Paiement">
    utilisateurId?: IntFilter<"Paiement"> | number
    produitId?: IntFilter<"Paiement"> | number
  }

  export type UtilisateurCreateWithoutProduitsInput = {
    nom: string
    prenom?: string | null
    email: string
    telephone?: string | null
    motDePasse: string
    role?: $Enums.RoleUtilisateur
    estActif?: boolean
    dateCreation?: Date | string
    dateModification?: Date | string
    notifications?: NotificationCreateNestedManyWithoutUtilisateurInput
    vuesProduites?: VueProduitCreateNestedManyWithoutUtilisateurInput
    paiements?: PaiementCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutProduitsInput = {
    id?: number
    nom: string
    prenom?: string | null
    email: string
    telephone?: string | null
    motDePasse: string
    role?: $Enums.RoleUtilisateur
    estActif?: boolean
    dateCreation?: Date | string
    dateModification?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutUtilisateurInput
    vuesProduites?: VueProduitUncheckedCreateNestedManyWithoutUtilisateurInput
    paiements?: PaiementUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutProduitsInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutProduitsInput, UtilisateurUncheckedCreateWithoutProduitsInput>
  }

  export type VueProduitCreateWithoutProduitInput = {
    dateVue?: Date | string
    adresseIp?: string | null
    utilisateur?: UtilisateurCreateNestedOneWithoutVuesProduitesInput
  }

  export type VueProduitUncheckedCreateWithoutProduitInput = {
    id?: number
    dateVue?: Date | string
    adresseIp?: string | null
    utilisateurId?: number | null
  }

  export type VueProduitCreateOrConnectWithoutProduitInput = {
    where: VueProduitWhereUniqueInput
    create: XOR<VueProduitCreateWithoutProduitInput, VueProduitUncheckedCreateWithoutProduitInput>
  }

  export type VueProduitCreateManyProduitInputEnvelope = {
    data: VueProduitCreateManyProduitInput | VueProduitCreateManyProduitInput[]
    skipDuplicates?: boolean
  }

  export type PaiementCreateWithoutProduitInput = {
    reference: string
    montant: number
    prestataire: $Enums.PrestatairePaiement
    statut?: $Enums.StatutPaiement
    dateExpiration: Date | string
    dateCreation?: Date | string
    dateModification?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateur: UtilisateurCreateNestedOneWithoutPaiementsInput
    transactions?: TransactionCreateNestedManyWithoutPaiementInput
  }

  export type PaiementUncheckedCreateWithoutProduitInput = {
    id?: number
    reference: string
    montant: number
    prestataire: $Enums.PrestatairePaiement
    statut?: $Enums.StatutPaiement
    dateExpiration: Date | string
    dateCreation?: Date | string
    dateModification?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateurId: number
    transactions?: TransactionUncheckedCreateNestedManyWithoutPaiementInput
  }

  export type PaiementCreateOrConnectWithoutProduitInput = {
    where: PaiementWhereUniqueInput
    create: XOR<PaiementCreateWithoutProduitInput, PaiementUncheckedCreateWithoutProduitInput>
  }

  export type PaiementCreateManyProduitInputEnvelope = {
    data: PaiementCreateManyProduitInput | PaiementCreateManyProduitInput[]
    skipDuplicates?: boolean
  }

  export type UtilisateurUpsertWithoutProduitsInput = {
    update: XOR<UtilisateurUpdateWithoutProduitsInput, UtilisateurUncheckedUpdateWithoutProduitsInput>
    create: XOR<UtilisateurCreateWithoutProduitsInput, UtilisateurUncheckedCreateWithoutProduitsInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutProduitsInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutProduitsInput, UtilisateurUncheckedUpdateWithoutProduitsInput>
  }

  export type UtilisateurUpdateWithoutProduitsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
    estActif?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUpdateManyWithoutUtilisateurNestedInput
    vuesProduites?: VueProduitUpdateManyWithoutUtilisateurNestedInput
    paiements?: PaiementUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutProduitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
    estActif?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutUtilisateurNestedInput
    vuesProduites?: VueProduitUncheckedUpdateManyWithoutUtilisateurNestedInput
    paiements?: PaiementUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type VueProduitUpsertWithWhereUniqueWithoutProduitInput = {
    where: VueProduitWhereUniqueInput
    update: XOR<VueProduitUpdateWithoutProduitInput, VueProduitUncheckedUpdateWithoutProduitInput>
    create: XOR<VueProduitCreateWithoutProduitInput, VueProduitUncheckedCreateWithoutProduitInput>
  }

  export type VueProduitUpdateWithWhereUniqueWithoutProduitInput = {
    where: VueProduitWhereUniqueInput
    data: XOR<VueProduitUpdateWithoutProduitInput, VueProduitUncheckedUpdateWithoutProduitInput>
  }

  export type VueProduitUpdateManyWithWhereWithoutProduitInput = {
    where: VueProduitScalarWhereInput
    data: XOR<VueProduitUpdateManyMutationInput, VueProduitUncheckedUpdateManyWithoutProduitInput>
  }

  export type PaiementUpsertWithWhereUniqueWithoutProduitInput = {
    where: PaiementWhereUniqueInput
    update: XOR<PaiementUpdateWithoutProduitInput, PaiementUncheckedUpdateWithoutProduitInput>
    create: XOR<PaiementCreateWithoutProduitInput, PaiementUncheckedCreateWithoutProduitInput>
  }

  export type PaiementUpdateWithWhereUniqueWithoutProduitInput = {
    where: PaiementWhereUniqueInput
    data: XOR<PaiementUpdateWithoutProduitInput, PaiementUncheckedUpdateWithoutProduitInput>
  }

  export type PaiementUpdateManyWithWhereWithoutProduitInput = {
    where: PaiementScalarWhereInput
    data: XOR<PaiementUpdateManyMutationInput, PaiementUncheckedUpdateManyWithoutProduitInput>
  }

  export type UtilisateurCreateWithoutNotificationsInput = {
    nom: string
    prenom?: string | null
    email: string
    telephone?: string | null
    motDePasse: string
    role?: $Enums.RoleUtilisateur
    estActif?: boolean
    dateCreation?: Date | string
    dateModification?: Date | string
    produits?: ProduitCreateNestedManyWithoutUtilisateurInput
    vuesProduites?: VueProduitCreateNestedManyWithoutUtilisateurInput
    paiements?: PaiementCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutNotificationsInput = {
    id?: number
    nom: string
    prenom?: string | null
    email: string
    telephone?: string | null
    motDePasse: string
    role?: $Enums.RoleUtilisateur
    estActif?: boolean
    dateCreation?: Date | string
    dateModification?: Date | string
    produits?: ProduitUncheckedCreateNestedManyWithoutUtilisateurInput
    vuesProduites?: VueProduitUncheckedCreateNestedManyWithoutUtilisateurInput
    paiements?: PaiementUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutNotificationsInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutNotificationsInput, UtilisateurUncheckedCreateWithoutNotificationsInput>
  }

  export type UtilisateurUpsertWithoutNotificationsInput = {
    update: XOR<UtilisateurUpdateWithoutNotificationsInput, UtilisateurUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UtilisateurCreateWithoutNotificationsInput, UtilisateurUncheckedCreateWithoutNotificationsInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutNotificationsInput, UtilisateurUncheckedUpdateWithoutNotificationsInput>
  }

  export type UtilisateurUpdateWithoutNotificationsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
    estActif?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    produits?: ProduitUpdateManyWithoutUtilisateurNestedInput
    vuesProduites?: VueProduitUpdateManyWithoutUtilisateurNestedInput
    paiements?: PaiementUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
    estActif?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    produits?: ProduitUncheckedUpdateManyWithoutUtilisateurNestedInput
    vuesProduites?: VueProduitUncheckedUpdateManyWithoutUtilisateurNestedInput
    paiements?: PaiementUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type ProduitCreateWithoutVuesProduitesInput = {
    titre: string
    description: string
    prix: number
    estVip?: boolean
    imageUrl: string
    imagePublicId?: string | null
    vues?: number
    statut?: $Enums.StatutProduit
    localisation?: string | null
    categorie?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    dateExpiration: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutProduitsInput
    paiements?: PaiementCreateNestedManyWithoutProduitInput
  }

  export type ProduitUncheckedCreateWithoutVuesProduitesInput = {
    id?: number
    titre: string
    description: string
    prix: number
    estVip?: boolean
    imageUrl: string
    imagePublicId?: string | null
    vues?: number
    statut?: $Enums.StatutProduit
    localisation?: string | null
    categorie?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    dateExpiration: Date | string
    utilisateurId: number
    paiements?: PaiementUncheckedCreateNestedManyWithoutProduitInput
  }

  export type ProduitCreateOrConnectWithoutVuesProduitesInput = {
    where: ProduitWhereUniqueInput
    create: XOR<ProduitCreateWithoutVuesProduitesInput, ProduitUncheckedCreateWithoutVuesProduitesInput>
  }

  export type UtilisateurCreateWithoutVuesProduitesInput = {
    nom: string
    prenom?: string | null
    email: string
    telephone?: string | null
    motDePasse: string
    role?: $Enums.RoleUtilisateur
    estActif?: boolean
    dateCreation?: Date | string
    dateModification?: Date | string
    produits?: ProduitCreateNestedManyWithoutUtilisateurInput
    notifications?: NotificationCreateNestedManyWithoutUtilisateurInput
    paiements?: PaiementCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutVuesProduitesInput = {
    id?: number
    nom: string
    prenom?: string | null
    email: string
    telephone?: string | null
    motDePasse: string
    role?: $Enums.RoleUtilisateur
    estActif?: boolean
    dateCreation?: Date | string
    dateModification?: Date | string
    produits?: ProduitUncheckedCreateNestedManyWithoutUtilisateurInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUtilisateurInput
    paiements?: PaiementUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutVuesProduitesInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutVuesProduitesInput, UtilisateurUncheckedCreateWithoutVuesProduitesInput>
  }

  export type ProduitUpsertWithoutVuesProduitesInput = {
    update: XOR<ProduitUpdateWithoutVuesProduitesInput, ProduitUncheckedUpdateWithoutVuesProduitesInput>
    create: XOR<ProduitCreateWithoutVuesProduitesInput, ProduitUncheckedCreateWithoutVuesProduitesInput>
    where?: ProduitWhereInput
  }

  export type ProduitUpdateToOneWithWhereWithoutVuesProduitesInput = {
    where?: ProduitWhereInput
    data: XOR<ProduitUpdateWithoutVuesProduitesInput, ProduitUncheckedUpdateWithoutVuesProduitesInput>
  }

  export type ProduitUpdateWithoutVuesProduitesInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    estVip?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    vues?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutProduitFieldUpdateOperationsInput | $Enums.StatutProduit
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    categorie?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutProduitsNestedInput
    paiements?: PaiementUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateWithoutVuesProduitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    estVip?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    vues?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutProduitFieldUpdateOperationsInput | $Enums.StatutProduit
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    categorie?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    paiements?: PaiementUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type UtilisateurUpsertWithoutVuesProduitesInput = {
    update: XOR<UtilisateurUpdateWithoutVuesProduitesInput, UtilisateurUncheckedUpdateWithoutVuesProduitesInput>
    create: XOR<UtilisateurCreateWithoutVuesProduitesInput, UtilisateurUncheckedCreateWithoutVuesProduitesInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutVuesProduitesInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutVuesProduitesInput, UtilisateurUncheckedUpdateWithoutVuesProduitesInput>
  }

  export type UtilisateurUpdateWithoutVuesProduitesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
    estActif?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    produits?: ProduitUpdateManyWithoutUtilisateurNestedInput
    notifications?: NotificationUpdateManyWithoutUtilisateurNestedInput
    paiements?: PaiementUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutVuesProduitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
    estActif?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    produits?: ProduitUncheckedUpdateManyWithoutUtilisateurNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUtilisateurNestedInput
    paiements?: PaiementUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurCreateWithoutPaiementsInput = {
    nom: string
    prenom?: string | null
    email: string
    telephone?: string | null
    motDePasse: string
    role?: $Enums.RoleUtilisateur
    estActif?: boolean
    dateCreation?: Date | string
    dateModification?: Date | string
    produits?: ProduitCreateNestedManyWithoutUtilisateurInput
    notifications?: NotificationCreateNestedManyWithoutUtilisateurInput
    vuesProduites?: VueProduitCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutPaiementsInput = {
    id?: number
    nom: string
    prenom?: string | null
    email: string
    telephone?: string | null
    motDePasse: string
    role?: $Enums.RoleUtilisateur
    estActif?: boolean
    dateCreation?: Date | string
    dateModification?: Date | string
    produits?: ProduitUncheckedCreateNestedManyWithoutUtilisateurInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUtilisateurInput
    vuesProduites?: VueProduitUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutPaiementsInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutPaiementsInput, UtilisateurUncheckedCreateWithoutPaiementsInput>
  }

  export type ProduitCreateWithoutPaiementsInput = {
    titre: string
    description: string
    prix: number
    estVip?: boolean
    imageUrl: string
    imagePublicId?: string | null
    vues?: number
    statut?: $Enums.StatutProduit
    localisation?: string | null
    categorie?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    dateExpiration: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutProduitsInput
    vuesProduites?: VueProduitCreateNestedManyWithoutProduitInput
  }

  export type ProduitUncheckedCreateWithoutPaiementsInput = {
    id?: number
    titre: string
    description: string
    prix: number
    estVip?: boolean
    imageUrl: string
    imagePublicId?: string | null
    vues?: number
    statut?: $Enums.StatutProduit
    localisation?: string | null
    categorie?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    dateExpiration: Date | string
    utilisateurId: number
    vuesProduites?: VueProduitUncheckedCreateNestedManyWithoutProduitInput
  }

  export type ProduitCreateOrConnectWithoutPaiementsInput = {
    where: ProduitWhereUniqueInput
    create: XOR<ProduitCreateWithoutPaiementsInput, ProduitUncheckedCreateWithoutPaiementsInput>
  }

  export type TransactionCreateWithoutPaiementInput = {
    type: $Enums.TypeTransaction
    montant: number
    statut?: $Enums.StatutTransaction
    referenceExterne?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TransactionUncheckedCreateWithoutPaiementInput = {
    id?: number
    type: $Enums.TypeTransaction
    montant: number
    statut?: $Enums.StatutTransaction
    referenceExterne?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TransactionCreateOrConnectWithoutPaiementInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutPaiementInput, TransactionUncheckedCreateWithoutPaiementInput>
  }

  export type TransactionCreateManyPaiementInputEnvelope = {
    data: TransactionCreateManyPaiementInput | TransactionCreateManyPaiementInput[]
    skipDuplicates?: boolean
  }

  export type UtilisateurUpsertWithoutPaiementsInput = {
    update: XOR<UtilisateurUpdateWithoutPaiementsInput, UtilisateurUncheckedUpdateWithoutPaiementsInput>
    create: XOR<UtilisateurCreateWithoutPaiementsInput, UtilisateurUncheckedCreateWithoutPaiementsInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutPaiementsInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutPaiementsInput, UtilisateurUncheckedUpdateWithoutPaiementsInput>
  }

  export type UtilisateurUpdateWithoutPaiementsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
    estActif?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    produits?: ProduitUpdateManyWithoutUtilisateurNestedInput
    notifications?: NotificationUpdateManyWithoutUtilisateurNestedInput
    vuesProduites?: VueProduitUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutPaiementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
    estActif?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    produits?: ProduitUncheckedUpdateManyWithoutUtilisateurNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUtilisateurNestedInput
    vuesProduites?: VueProduitUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type ProduitUpsertWithoutPaiementsInput = {
    update: XOR<ProduitUpdateWithoutPaiementsInput, ProduitUncheckedUpdateWithoutPaiementsInput>
    create: XOR<ProduitCreateWithoutPaiementsInput, ProduitUncheckedCreateWithoutPaiementsInput>
    where?: ProduitWhereInput
  }

  export type ProduitUpdateToOneWithWhereWithoutPaiementsInput = {
    where?: ProduitWhereInput
    data: XOR<ProduitUpdateWithoutPaiementsInput, ProduitUncheckedUpdateWithoutPaiementsInput>
  }

  export type ProduitUpdateWithoutPaiementsInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    estVip?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    vues?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutProduitFieldUpdateOperationsInput | $Enums.StatutProduit
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    categorie?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutProduitsNestedInput
    vuesProduites?: VueProduitUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateWithoutPaiementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    estVip?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    vues?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutProduitFieldUpdateOperationsInput | $Enums.StatutProduit
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    categorie?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    vuesProduites?: VueProduitUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutPaiementInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutPaiementInput, TransactionUncheckedUpdateWithoutPaiementInput>
    create: XOR<TransactionCreateWithoutPaiementInput, TransactionUncheckedCreateWithoutPaiementInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutPaiementInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutPaiementInput, TransactionUncheckedUpdateWithoutPaiementInput>
  }

  export type TransactionUpdateManyWithWhereWithoutPaiementInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutPaiementInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: IntFilter<"Transaction"> | number
    type?: EnumTypeTransactionFilter<"Transaction"> | $Enums.TypeTransaction
    montant?: FloatFilter<"Transaction"> | number
    statut?: EnumStatutTransactionFilter<"Transaction"> | $Enums.StatutTransaction
    referenceExterne?: StringNullableFilter<"Transaction"> | string | null
    dateCreation?: DateTimeFilter<"Transaction"> | Date | string
    dateModification?: DateTimeFilter<"Transaction"> | Date | string
    details?: JsonNullableFilter<"Transaction">
    paiementId?: IntFilter<"Transaction"> | number
  }

  export type PaiementCreateWithoutTransactionsInput = {
    reference: string
    montant: number
    prestataire: $Enums.PrestatairePaiement
    statut?: $Enums.StatutPaiement
    dateExpiration: Date | string
    dateCreation?: Date | string
    dateModification?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateur: UtilisateurCreateNestedOneWithoutPaiementsInput
    produit: ProduitCreateNestedOneWithoutPaiementsInput
  }

  export type PaiementUncheckedCreateWithoutTransactionsInput = {
    id?: number
    reference: string
    montant: number
    prestataire: $Enums.PrestatairePaiement
    statut?: $Enums.StatutPaiement
    dateExpiration: Date | string
    dateCreation?: Date | string
    dateModification?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateurId: number
    produitId: number
  }

  export type PaiementCreateOrConnectWithoutTransactionsInput = {
    where: PaiementWhereUniqueInput
    create: XOR<PaiementCreateWithoutTransactionsInput, PaiementUncheckedCreateWithoutTransactionsInput>
  }

  export type PaiementUpsertWithoutTransactionsInput = {
    update: XOR<PaiementUpdateWithoutTransactionsInput, PaiementUncheckedUpdateWithoutTransactionsInput>
    create: XOR<PaiementCreateWithoutTransactionsInput, PaiementUncheckedCreateWithoutTransactionsInput>
    where?: PaiementWhereInput
  }

  export type PaiementUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: PaiementWhereInput
    data: XOR<PaiementUpdateWithoutTransactionsInput, PaiementUncheckedUpdateWithoutTransactionsInput>
  }

  export type PaiementUpdateWithoutTransactionsInput = {
    reference?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    prestataire?: EnumPrestatairePaiementFieldUpdateOperationsInput | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementFieldUpdateOperationsInput | $Enums.StatutPaiement
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateur?: UtilisateurUpdateOneRequiredWithoutPaiementsNestedInput
    produit?: ProduitUpdateOneRequiredWithoutPaiementsNestedInput
  }

  export type PaiementUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    reference?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    prestataire?: EnumPrestatairePaiementFieldUpdateOperationsInput | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementFieldUpdateOperationsInput | $Enums.StatutPaiement
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateurId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
  }

  export type ProduitCreateManyUtilisateurInput = {
    id?: number
    titre: string
    description: string
    prix: number
    estVip?: boolean
    imageUrl: string
    imagePublicId?: string | null
    vues?: number
    statut?: $Enums.StatutProduit
    localisation?: string | null
    categorie?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    dateExpiration: Date | string
  }

  export type NotificationCreateManyUtilisateurInput = {
    id?: number
    titre: string
    message: string
    type?: $Enums.TypeNotification
    estLue?: boolean
    dateCreation?: Date | string
  }

  export type VueProduitCreateManyUtilisateurInput = {
    id?: number
    dateVue?: Date | string
    adresseIp?: string | null
    produitId: number
  }

  export type PaiementCreateManyUtilisateurInput = {
    id?: number
    reference: string
    montant: number
    prestataire: $Enums.PrestatairePaiement
    statut?: $Enums.StatutPaiement
    dateExpiration: Date | string
    dateCreation?: Date | string
    dateModification?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    produitId: number
  }

  export type ProduitUpdateWithoutUtilisateurInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    estVip?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    vues?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutProduitFieldUpdateOperationsInput | $Enums.StatutProduit
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    categorie?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    vuesProduites?: VueProduitUpdateManyWithoutProduitNestedInput
    paiements?: PaiementUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    estVip?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    vues?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutProduitFieldUpdateOperationsInput | $Enums.StatutProduit
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    categorie?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    vuesProduites?: VueProduitUncheckedUpdateManyWithoutProduitNestedInput
    paiements?: PaiementUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateManyWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    estVip?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    vues?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutProduitFieldUpdateOperationsInput | $Enums.StatutProduit
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    categorie?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUtilisateurInput = {
    titre?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification
    estLue?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification
    estLue?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification
    estLue?: BoolFieldUpdateOperationsInput | boolean
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VueProduitUpdateWithoutUtilisateurInput = {
    dateVue?: DateTimeFieldUpdateOperationsInput | Date | string
    adresseIp?: NullableStringFieldUpdateOperationsInput | string | null
    produit?: ProduitUpdateOneRequiredWithoutVuesProduitesNestedInput
  }

  export type VueProduitUncheckedUpdateWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateVue?: DateTimeFieldUpdateOperationsInput | Date | string
    adresseIp?: NullableStringFieldUpdateOperationsInput | string | null
    produitId?: IntFieldUpdateOperationsInput | number
  }

  export type VueProduitUncheckedUpdateManyWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateVue?: DateTimeFieldUpdateOperationsInput | Date | string
    adresseIp?: NullableStringFieldUpdateOperationsInput | string | null
    produitId?: IntFieldUpdateOperationsInput | number
  }

  export type PaiementUpdateWithoutUtilisateurInput = {
    reference?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    prestataire?: EnumPrestatairePaiementFieldUpdateOperationsInput | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementFieldUpdateOperationsInput | $Enums.StatutPaiement
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    produit?: ProduitUpdateOneRequiredWithoutPaiementsNestedInput
    transactions?: TransactionUpdateManyWithoutPaiementNestedInput
  }

  export type PaiementUncheckedUpdateWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    reference?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    prestataire?: EnumPrestatairePaiementFieldUpdateOperationsInput | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementFieldUpdateOperationsInput | $Enums.StatutPaiement
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    produitId?: IntFieldUpdateOperationsInput | number
    transactions?: TransactionUncheckedUpdateManyWithoutPaiementNestedInput
  }

  export type PaiementUncheckedUpdateManyWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    reference?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    prestataire?: EnumPrestatairePaiementFieldUpdateOperationsInput | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementFieldUpdateOperationsInput | $Enums.StatutPaiement
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    produitId?: IntFieldUpdateOperationsInput | number
  }

  export type VueProduitCreateManyProduitInput = {
    id?: number
    dateVue?: Date | string
    adresseIp?: string | null
    utilisateurId?: number | null
  }

  export type PaiementCreateManyProduitInput = {
    id?: number
    reference: string
    montant: number
    prestataire: $Enums.PrestatairePaiement
    statut?: $Enums.StatutPaiement
    dateExpiration: Date | string
    dateCreation?: Date | string
    dateModification?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateurId: number
  }

  export type VueProduitUpdateWithoutProduitInput = {
    dateVue?: DateTimeFieldUpdateOperationsInput | Date | string
    adresseIp?: NullableStringFieldUpdateOperationsInput | string | null
    utilisateur?: UtilisateurUpdateOneWithoutVuesProduitesNestedInput
  }

  export type VueProduitUncheckedUpdateWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateVue?: DateTimeFieldUpdateOperationsInput | Date | string
    adresseIp?: NullableStringFieldUpdateOperationsInput | string | null
    utilisateurId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VueProduitUncheckedUpdateManyWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateVue?: DateTimeFieldUpdateOperationsInput | Date | string
    adresseIp?: NullableStringFieldUpdateOperationsInput | string | null
    utilisateurId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PaiementUpdateWithoutProduitInput = {
    reference?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    prestataire?: EnumPrestatairePaiementFieldUpdateOperationsInput | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementFieldUpdateOperationsInput | $Enums.StatutPaiement
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateur?: UtilisateurUpdateOneRequiredWithoutPaiementsNestedInput
    transactions?: TransactionUpdateManyWithoutPaiementNestedInput
  }

  export type PaiementUncheckedUpdateWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    reference?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    prestataire?: EnumPrestatairePaiementFieldUpdateOperationsInput | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementFieldUpdateOperationsInput | $Enums.StatutPaiement
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateurId?: IntFieldUpdateOperationsInput | number
    transactions?: TransactionUncheckedUpdateManyWithoutPaiementNestedInput
  }

  export type PaiementUncheckedUpdateManyWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    reference?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    prestataire?: EnumPrestatairePaiementFieldUpdateOperationsInput | $Enums.PrestatairePaiement
    statut?: EnumStatutPaiementFieldUpdateOperationsInput | $Enums.StatutPaiement
    dateExpiration?: DateTimeFieldUpdateOperationsInput | Date | string
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    utilisateurId?: IntFieldUpdateOperationsInput | number
  }

  export type TransactionCreateManyPaiementInput = {
    id?: number
    type: $Enums.TypeTransaction
    montant: number
    statut?: $Enums.StatutTransaction
    referenceExterne?: string | null
    dateCreation?: Date | string
    dateModification?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TransactionUpdateWithoutPaiementInput = {
    type?: EnumTypeTransactionFieldUpdateOperationsInput | $Enums.TypeTransaction
    montant?: FloatFieldUpdateOperationsInput | number
    statut?: EnumStatutTransactionFieldUpdateOperationsInput | $Enums.StatutTransaction
    referenceExterne?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TransactionUncheckedUpdateWithoutPaiementInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeTransactionFieldUpdateOperationsInput | $Enums.TypeTransaction
    montant?: FloatFieldUpdateOperationsInput | number
    statut?: EnumStatutTransactionFieldUpdateOperationsInput | $Enums.StatutTransaction
    referenceExterne?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TransactionUncheckedUpdateManyWithoutPaiementInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeTransactionFieldUpdateOperationsInput | $Enums.TypeTransaction
    montant?: FloatFieldUpdateOperationsInput | number
    statut?: EnumStatutTransactionFieldUpdateOperationsInput | $Enums.StatutTransaction
    referenceExterne?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UtilisateurCountOutputTypeDefaultArgs instead
     */
    export type UtilisateurCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UtilisateurCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProduitCountOutputTypeDefaultArgs instead
     */
    export type ProduitCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProduitCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaiementCountOutputTypeDefaultArgs instead
     */
    export type PaiementCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaiementCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UtilisateurDefaultArgs instead
     */
    export type UtilisateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UtilisateurDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProduitDefaultArgs instead
     */
    export type ProduitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProduitDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VueProduitDefaultArgs instead
     */
    export type VueProduitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VueProduitDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaiementDefaultArgs instead
     */
    export type PaiementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaiementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransactionDefaultArgs instead
     */
    export type TransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransactionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}