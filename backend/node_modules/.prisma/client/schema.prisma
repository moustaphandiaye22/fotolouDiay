// Schéma Prisma pour FotoLouJay
// Application mobile de vente en ligne

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id               Int             @id @default(autoincrement())
  nom              String
  prenom           String?
  email            String          @unique
  telephone        String?
  motDePasse       String
  role             RoleUtilisateur @default(UTILISATEUR)
  estActif         Boolean         @default(true)
  dateCreation     DateTime        @default(now())
  dateModification DateTime        @updatedAt

  // Relations
  produits      Produit[]
  notifications Notification[]
  vuesProduites VueProduit[]

  @@map("utilisateurs")
}

model Produit {
  id               Int           @id @default(autoincrement())
  titre            String
  description      String
  prix             Float
  estVip           Boolean       @default(false)
  imageUrl         String
  imagePublicId    String? // Pour la gestion des images (Cloudinary/Firebase)
  vues             Int           @default(0)
  statut           StatutProduit @default(EN_ATTENTE)
  localisation     String?
  categorie        String? // Catégorie du produit (Téléphone, Ordinateur, etc.)
  dateCreation     DateTime      @default(now())
  dateModification DateTime      @updatedAt
  dateExpiration   DateTime // Calculée automatiquement (+7 jours)

  // Relations
  utilisateurId Int
  utilisateur   Utilisateur  @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
  vuesProduites VueProduit[]

  @@index([statut])
  @@index([estVip])
  @@index([dateExpiration])
  @@index([categorie])
  @@map("produits")
}

model Notification {
  id           Int              @id @default(autoincrement())
  titre        String
  message      String
  type         TypeNotification @default(GENERALE)
  estLue       Boolean          @default(false)
  dateCreation DateTime         @default(now())

  // Relations
  utilisateurId Int
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)

  @@index([utilisateurId, estLue])
  @@map("notifications")
}

model VueProduit {
  id        Int      @id @default(autoincrement())
  dateVue   DateTime @default(now())
  adresseIp String?

  // Relations
  produitId     Int
  produit       Produit      @relation(fields: [produitId], references: [id], onDelete: Cascade)
  utilisateurId Int? // Optionnel si l'utilisateur est connecté
  utilisateur   Utilisateur? @relation(fields: [utilisateurId], references: [id], onDelete: SetNull)

  @@unique([produitId, utilisateurId, adresseIp]) // Éviter les doublons de vues
  @@map("vues_produits")
}

// Enums
enum RoleUtilisateur {
  UTILISATEUR
  MODERATEUR
  ADMINISTRATEUR

  @@map("role_utilisateur")
}

enum StatutProduit {
  EN_ATTENTE // En attente de validation par un modérateur
  VALIDE // Validé et visible pour tous
  REJETE // Rejeté par un modérateur
  EXPIRE // Expiré automatiquement après 7 jours

  @@map("statut_produit")
}

enum TypeNotification {
  GENERALE // Notification générale
  PRODUIT_EXPIRE // Produit va expirer
  PRODUIT_VALIDE // Produit validé par modérateur
  PRODUIT_REJETE // Produit rejeté par modérateur
  RAPPEL // Rappel pour republier

  @@map("type_notification")
}
